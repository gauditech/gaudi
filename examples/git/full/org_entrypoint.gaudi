entrypoint Organizations {
  target model Org
  identify with slug
  alias org
  response {
    select { name, description, slug }
    role org_admin or org_member {
      select { member_count }
      select { plan { name, space, seats } }
    }
  }
  list endpoint {}
  get endpoint {}
  create endpoint {
    validate with fieldset {
      pick Org.{name, description, slug }
      pick OrgPaymentPlan.{name as plan_name}
      validate plan_name {
        allow when one_of ["free", "business"]
      }
    }
    action {
      create Org as org {
        reference plan through name
      }
      create OrgMembership {
        set user @auth
        set org org
        set role "owner"
      }
    }
  }
  update endpoint {
    validate with fieldset {
      pick Org.{ name, description, slug }
    }
  }
  update endpoint upgrade {
    # TODO
  }
  delete endpoint {
    allow when @auth in admins
  }

  entrypoint Repositories {
    target relation repos
    identify with slug
    alias repo
    response {
      select { slug, description, private, full_name, owner, labels }
    }

    list endpoint {
      role org_member or repo_collaborator {}
      role * { filter { not private } }
    }

    get endpoint {
      role org_member or repo_collaborator {}
      role * { filter { not private } }
    }

    create endpoint {
      role org_admin { allow }
      action {
        create Repo as repo {
          set org org
        }
        create RepoLabel from query {
          from org.defaultLabels
          select { name, description, color }
          set is_default true
          set repo repo
        }
      }
    }

    delete endpoint {
      role org_admin { allow }
    }

    entrypoint Issues {
      target relation issues
      identify with number
      alias issue

      response {
        select { number, state, title, body, locked, locked_reason }
      }
      role org_member or repo_collaborator { allow }
      role * {
        deny when repo.private, code 404
        # deny method update, delete # !!!
      }

      list endpoint {}
      get endpoint {}
      update endpoint {
        role org_admin or repo_admin { allow }
        validate with fieldset {
          pick Issue.{title, body}
        }
      }
      delete endpoint {
        role org_admin or repo_admin { allow }
        # NOTE: GitHub API doesn't document this, it's UI only action
      }
      update endpoint lock {
        role org_admin or repo_admin { allow }
        action {
          update Issue as issue {
            set locked true
            input locked_reason
          }
          create IssueEvent {
            set issue issue
            set actor @auth
            set event "locked"
          }
        }
      }
      delete endpoint unlock {
        role org_admin or repo_admin { allow }
        action {
          update Issue as issue {
            set locked false, set locked_reason null
          }
          create IssueEvent {
            set issue issue
            set actor @auth
            set event "locked"
          }
        }
      }
    } #> entrypoint Issues
  } #> entrypoint Repos
} #> entrypoint Organizations
