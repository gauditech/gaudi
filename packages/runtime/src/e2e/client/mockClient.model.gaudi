
model Org {
  field slug { type string, unique }
  field name { type string }
  relation repos { from Repo, through org }
}

model Repo {
  reference org { to Org }
  field slug { type string }
  field name { type string }
  field description { type string }
  reference owner { to Owner, nullable }
}

model Owner {
  field slug { type string }
  field name { type string }
  relation repo { from Repo, through owner }
}

generate client {
  target js
  // test custom output folder
  output "src/e2e/client/__snapshots__/mockClient/client"
}

// "api model" is not implemented
//generate client {
//  target js
//  // test modela API
//  api model
//  // test custom output folder
//  output "src/e2e/client/__snapshots__/mockClient/client"
//}
runtime MyRuntime {
  source path "./src/e2e/api/hooks"
}

api {
  entrypoint Org {
    identify { through slug }

    get endpoint {}
    create endpoint {}
    update endpoint {}
    list endpoint {}
    delete endpoint {}

    custom endpoint {
      path "customOneFetch"
      method GET
      cardinality one
    }
    custom endpoint {
        path "customOneSubmit"
        method PATCH
        cardinality one
        extra inputs {
          // test action fieldset data type
          field extraProp { type string }
        }
    }
    custom endpoint {
        path "customManyFetch"
        method GET
        cardinality many
    }
    custom endpoint {
        path "customManySubmit"
        method POST
        cardinality many
        extra inputs {
          // test action fieldset data type
          field extraProp { type string }
        }
    }

    // repo entrypoints
    entrypoint repos {
      // test non-default response
      response { slug, name }

      get endpoint {}
      create endpoint {
        extra inputs {
          // test changing input fields
          field virtProp { type string }
        }
        action {
          create {}
        }
      }
      update endpoint {
        action {
          update {
            input { name, description }
          }
        }
      }
      list endpoint { pageable }
      delete endpoint {}

      custom endpoint {
        path "customOneFetch"
        method GET
        cardinality one
      }
      custom endpoint {
          path "customOneSubmit"
          method PATCH
          cardinality one
      }
      custom endpoint {
          path "customManyFetch"
          method GET
          cardinality many
      }
      custom endpoint {
          path "customManySubmit"
          method POST
          cardinality many

          extra inputs {
            field name { type string }
            field counter { type integer }
          }
          action {
            execute {
              hook {
                arg name name
                arg counter counter
                source customAction from "hooks.js"
              }
            }
          }
      }
      entrypoint owner {
        get endpoint {}
        update endpoint {}
        create endpoint {}
        delete endpoint {}
        custom endpoint {
          path "customOneFetch"
          method GET
          cardinality one
        }
        custom endpoint {
            path "customOneSubmit"
            method PATCH
            cardinality one
        }
      }
    }
  }
}
