Gaudi {
  Definition
    = NewlineBody<Model, ";">

  // Override Ohm's built-in definition of space.
  space += comment

  Model
    = "model" identifier "{" NewlineBody<ModelBody, ";"> "}"

  ModelBody
    = Field
    | Reference
    | Relation
    | Query
    | Computed

  Field
    = "field" identifier "{" NonemptyNewlineBody<FieldBody, ","> "}"

  FieldBody
    = "type" identifier -- type
    | "default" literal -- default // we allow only literals for now
    | ("nullable" | "unique") -- tag

  Reference
    = "reference" identifier "{" NonemptyNewlineBody<ReferenceBody, ","> "}"

  ReferenceBody
    = "to" IdentifierPath -- to
    | ("nullable" | "unique") -- tag

  Relation
    = "relation" identifier "{" NonemptyNewlineBody<RelationBody, ","> "}"

  RelationBody
    = "from" IdentifierPath -- from
    | "through" identifier -- through

  Query
    = "query" identifier "{" NonemptyNewlineBody<QueryBody, ","> "}"

  QueryBody
    = "from" IdentifierPath -- from
    | "filter" QueryExp -- filter

  Computed
    = "computed" identifier "{" QueryExp "}"

  QueryExp = OrExp

  OrExp
    = OrExp or AndExp -- or
    | AndExp

  AndExp
    = AndExp and IsExp -- and
    | IsExp

  IsExp
    = IsExp is not InExp -- is_not
    | IsExp is InExp -- is
    | InExp

  InExp
    = InExp not in CompExp -- not_in
    | InExp in CompExp -- in
    | CompExp

  CompExp
    = CompExp "<" PrimaryExp -- lt
    | CompExp "<=" PrimaryExp -- lteq
    | CompExp ">" PrimaryExp -- gt
    | CompExp ">=" PrimaryExp -- gteq
    | PrimaryExp

  PrimaryExp
    = "(" QueryExp ")" -- paren
    | not PrimaryExp -- not
    | literal -- literal
    | IdentifierPath -- identifier

  IdentifierPath = identifier ("." identifier)*

  literal (an literal) = null | boolean | integer | float | string

  boolean = true | false
  integer = digit+
  float = digit* "." digit*
  string = "\"" (~"\"" any)* "\""

  keywords = null | true | false | is | not | in
  null = "null" ~identifierPart
  true = "true" ~identifierPart
  false = "false" ~identifierPart
  or = "or" ~identifierPart
  and = "and" ~identifierPart
  is = "is" ~identifierPart
  not = "not" ~identifierPart
  in = "in" ~identifierPart

  identifier (an identifier) = identifierStart identifierPart*
  identifierStart = letter | "_"
  identifierPart = identifierStart | alnum

  NewlineBody<Exp, delimiter>
    = NonemptyNewlineBody<Exp, delimiter>
    | -- empty

  NonemptyNewlineBody<Exp, delimiter>
    = Exp (#delimiterOrNL<delimiter> Exp)* #delimiterOrNL<delimiter>?

  lineTerminator (a new line) = "\n" | "\r" | "\u2028" | "\u2029"

  delimiterOrNL<delimiter>
     = (~lineTerminator space)* (lineTerminator | delimiter)

  comment = multiLineComment | singleLineComment

  multiLineComment = "/*" (~"*/" any)* "*/"
  singleLineComment = "//" (~lineTerminator any)*
}
