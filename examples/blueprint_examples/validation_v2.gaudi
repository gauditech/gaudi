# Fieldset definition with all the features
# PoC syntax - no transformations

fieldset UserFieldset {
    pick User.{full_name, email, details}
    field full_name { type text, min 4, max 100 }
    field accept_tos { type boolean }

    validator name_not_email {
        key full_name
        assert not is_equal full_name, email
    }
}

fieldset -> podskup modela, samo field i validators
ensureovi -> u modelu

org ima min 1 member -> error, "group must have at least 1 member"
validator {
    # na grupi
    memberships min 1
}

fieldset EmailFieldset {
    field email { type string }
}

fieldset Registration {
    field user { type UserFieldset }
    field emails { type EmailFieldset, list }
}

> Error na:
registration.emails[2].email <-- must be a valid email address

err response:

{
    ok: false,
    errors: {
        "emails": {
            2: {
                email: [
                    {
                        code: "invalid_email",
                        args: { value: "notanemail.foo" },
                        message: "must be a valid email address"
                    }
                ]
            }
        }
    },
}

validator_set UserEmail { min 4, max 40 }

model User {
    field email {
        type string
        unique LOWER
        validators { UserEmail }
    }
    field status {
        type text
        one_of ['pending', 'success', 'failure']
    }

    queries, computed, ...
}

model Org {
    query successful_users {
        from users,
        filter { status == 'successful' } <-- compile error
    }
}

modeli podrzavaju:
+ field validatore
+ custom hook validatore
+ ensureove

fieldseti podrzavaju:
+ custom validatore
+ pickanje iz modela
+ pickanje iz fieldseta (validators included)
+ custom hook validatore

Endpointi podrzavaju:
+ ensureove (v1)

Todo:
+ custom validatori implementacija
- jel validator blok ili ono drugo

fieldset {
    field first_name {
        type text
        validate {
            min 4 <first_name>
            max 6 <first_name>
        }
        validate between 4 10
    }
    field first_name { type text, validate { min 4, max 6 } }
    validator first_name <-- nije dozvoljeno

    validator_todo first_name_extras { <-- kompozitni validator 
        error_key first_name <-- spremi errore pod `first_name` key
        validate regex /f[a-z]+/ first_name
    }

    validator password_extras {
        error_key password_confirm
        validate is_equal password password_confirm
    }
}

JS implementacija custom validatora
validator is_equal {
    args: [
        { left: {type: "string"}, right: {type: "string"} },
        { left: {type: "number"}, right: {type: "number"} },
    fn (args): {
        args.left.value <- testtest
        args.left.type <-- string
        if(args.type.string) {
            if(args.left === args.right) {
                return {
                    code: "values_not_equal",
                    params: { left: args.left, right: args.right },
                    message: "..."
                }
            }
        } else (number) {
            ... blabla
        }
        # return <-- void znaci nema errora
    },
    errorType (args) {
        [{
            code: { type: "constant", value: "values_not_equal" },
            params: {
                left: { type: args.left.type },
                right: { type: args.right.type }
            },
            message: { type: "string" }
        }]
    }
}

is_equal password password_confirm

code: is_equal, args: [left: "testtest", right: "nottesttest"]