# Field definition variants

var {
    foo: ENV.foo
}


model User {
    dbname users
    field full_name type text, unique, nullable
    field full_name { type text, unique, nullable, one_of [ 'foo', 'bar' ] }
    field full_name {
        type text
        unique var.unique
        dbname user_full_name
        nullable
        one_of [ 'foo', 'bar', 'baz', var.v1, var.v2 ]
    }
}

# Reference definition variants

model Post {
    reference user from User
    reference user from User, dbname post_user_id
    reference user {
        from User
        field_name user_id
        dbname post_user_id
        nullable, unique
    }
}

# Relation/computed definition variants

model User as author {
    relation posts from Post
    relation posts from Post through user
    relation posts {
        from Post through user
    }

    query recent_posts { from posts, filter {
            created_at > now - 1_week
        }
    }
    computed recent_posts (user_id foo bar) = query {
        from posts
        filter created_at > now - 1_week
    }
    query recent_posts {
        from posts, filter created_at > now - 1_week
    }

    query all_likes from posts.likes # 1-many-many
    query all_likes from posts.likes.user # 1-many-many-1

    query all_likers { from posts.likes.user, distinct }
    query total_likes { from all_likers, count }
    computed total_likes = count all_likes
    computed all_likes_from (user_id_) = query {
        from posts.likes as p.l
        filter l.user.id is user_id
    }

    query ancient_posts from posts, filter id < 100, order_by asc id
    query ancient_post { from posts, filter id < 100, first }

    query all_likes {
        from posts.likes as p.l
        filter l.user_id == 1 or p.id < 100
    }

    # order / limit examples

    field latest_post, type: Post
    field recent_posts, type: list_of(Post)

    query latest_post {
        from posts
        filter created_at > now - 1_year
        order_by id asc created_at asc
        first
    } 
}

model User {
    field first_name type string
    field last_name type string
    relation posts from Post
    computed user_and_post_count = first_name + ' ' + last_name + ' - ' + count posts
    computed first_message_ever = (query { from posts, first }).message
}

# Variant examples

model User {
    variant Deleted {
        deleted_at is not null
        name is null
    }
    variant Validated {
        created_at is not null
        validated_at is not null
        ....
    }
    variant FreshUser {
        created_at is not null
        validated_at is null
    }
    variant New {
        created_at > now - 1_week
    }
}

model Measurement {
    field kind one_of ['lab', 'field']
    field calibration_matrix type array, nullable
    variant Lab {
        kind == 'lab'
        calibration_matrix is not null
    }
    variant Field {
        kind == 'field'
        calibration_matrix is null
    }
}

query User.Validated {
    filter ...
}

User.Validated...


# auth plugin using multiple tables, but adds "auth_id" as field to User

auth Auth0 {
    using auth0
    api_key var.auth0_api_key
}

model User {
    auth Auth0 # ?
    reference auth Auth0/User # ?
}
