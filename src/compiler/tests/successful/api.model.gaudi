runtime Runtime {
  source path "path/to/runtime"
}

model Org {
  field name {
    type string,
    validate {
      hook {
        default arg name
        source noUnicode from "hooks.js"
      }
    }
  }
  field slug {
    type string,
    unique,
    validate {
      hook {
        default arg slug
        inline "!/\\s/.test(slug)"
      }
    }
  }
  field description { type string }

  relation repos { from Repo, through org }

  computed summary { name + description }

  hook nameAndDesc {
    arg test query {
      select { name, description }
    }
    inline "test.name + ': ' + test.description"
  }
}


model Repo {
  reference org { to Org }

  field name { type string }
  field slug { type string, unique }
  field description { type string }
  field is_public { type boolean, default true }
  field latest_num { type integer }

  relation issues { from Issue, through repo }
}


model Issue {
  reference repo { to Repo }

  field number { type integer }
  field title { type string }

  relation comments { from Comment, through issue }
}

model Comment {
  reference issue { to Issue }
  field body { type string }
}

// ----- entrypoints

entrypoint Org {
  identify { through slug }
  response { name, slug, description, summary, nameAndDesc }

  get endpoint {}
  list endpoint {}
  create endpoint {
    action {
      create as org {}
    }
  }
  update endpoint {
    action {
      update {}
    }
  }
  delete endpoint {}

  entrypoint repos as repo {
    response { id, slug, description, org_id }

    get endpoint {}
    list endpoint {
      pageable
      filter { name is "asdf" }
      order by { name desc }
    }
    create endpoint {
      action {
        create as repo {
          set latest_num 0
          virtual input raw_description { type string }
          set description "Description: " + raw_description
          set slug hook {
            arg org org.name
            source randomSlug from "hooks.js"
          }
        }
      }
    }
    update endpoint {
      action {
        update {}
      }
    }
    delete endpoint {}

    entrypoint issues as issue {
      response { id, title, repo, number, comments }

      get endpoint {}
      create endpoint {
        action {
          create as issue {
            set number repo.latest_num + 1
          }

          update repo as repo2 {
            set latest_num repo.latest_num + 1
          }

          create issue.comments as c {}
        }
      }
    }
  }
}
