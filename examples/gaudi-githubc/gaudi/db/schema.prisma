datasource db {
      provider = "postgresql"
      url      = env("GAUDI_DATABASE_URL")
    }

    model org {
id Int @id @unique @default(autoincrement())
name String
slug String @unique
description String
optout String?

repos repo[] @relation("Repoorg")
memberships orgmembership[] @relation("OrgMembershiporg")


}
    model orgmembership {
id Int @id @unique @default(autoincrement())
org_id Int
user_id Int



org org @relation("OrgMembershiporg", fields: [org_id], references: [id])
user user @relation("OrgMembershipuser", fields: [user_id], references: [id])
}
    model repo {
id Int @id @unique @default(autoincrement())
name String
slug String @unique
description String
is_public Boolean
org_id Int

issues issue[] @relation("Issuerepo")

org org @relation("Repoorg", fields: [org_id], references: [id])
}
    model issue {
id Int @id @unique @default(autoincrement())
title String
body String
repo_id Int



repo repo @relation("Issuerepo", fields: [repo_id], references: [id])
}
    model user {
id Int @id @unique @default(autoincrement())
name String

authLocal userauthlocal[] @relation("UserAuthLocaluser")
accessToken useraccesstoken[] @relation("UserAccessTokenuser")
org_memberships orgmembership[] @relation("OrgMembershipuser")


}
    model userauthlocal {
id Int @id @unique @default(autoincrement())
username String @unique
password String
user_id Int



user user @relation("UserAuthLocaluser", fields: [user_id], references: [id])
}
    model useraccesstoken {
id Int @id @unique @default(autoincrement())
token String @unique
expirydate String
user_id Int



user user @relation("UserAccessTokenuser", fields: [user_id], references: [id])
}