runtime MyRuntime {
  sourcePath "./src/e2e/api/hooks"
}

model Org {
  field name {
    type text
    validate {
      hook {
        default arg name
        source noUnicode from "hooks.js"
      }
    }
  }
  field slug {
    type text
    unique
    validate {
      hook noSpace {
        default arg slug
        inline `!/\s/.test(slug)`
      }
    }
  }
  field description { type text }

  relation repos { from Repo, through org }

  computed summary { concat(name, "", description) }

  hook nameAndDesc {
    arg test query {
      select { name, description }
    }
    inline `test.name + ": " + test.description`
  }
}


model Repo {
  reference org { to Org }

  field name { type text }
  field slug { type text, unique }
  field description { type text }
  field is_public { type boolean, default true }
  field latest_num { type integer }

  relation issues { from Issue, through repo }
}


model Issue {
  reference repo { to Repo }

  field number { type text }
  field title { type text }

  relation comments { from Comment, through issue }
}

model Comment {
  reference issue { to Issue }
  field body { type text }
}

// ----- entrypoints

// Orgs
entrypoint Orgs {
  target model Org as org
  identify with slug
  response { name, slug, description, summary, nameAndDesc }

  // --- endpoints with "execute" actions
  // register BEFORE other endpoints to avoid mismatching with other endpoints

  custom endpoint {
    cardinality one
    method POST
    path "customOneAction"
    action {
      execute {
        virtual input counter { type integer }
        hook {
          arg name name
          arg counter counter
          source customAction from "hooks.js"
        }
      }
    }
  }

  custom endpoint {
    cardinality many
    method PATCH
    path "customManyAction"
    action {
      execute {
        virtual input counter { type integer }
        hook {
          arg name name
          arg counter counter
          source customAction from "hooks.js"
        }
      }
    }
  }

  // custom one endpoint - "execute" action responds
  custom endpoint {
    cardinality one
    method POST
    path "customOneActionResponds"
    action {
      execute {
        virtual input counter { type integer }
        responds
        hook {
          arg name name
          arg counter counter
          source customActionResponds from "hooks.js"
        }
      }
    }
  }

  // custom many endpoint - "execute" action responds
  custom endpoint {
    cardinality many
    method PATCH
    path "customManyActionResponds"
    action {
      execute {
        virtual input counter { type integer }
        responds
        hook {
          arg name name
          arg counter counter
          source customActionResponds from "hooks.js"
        }
      }
    }
  }

  // custom ep/action with action query
  custom endpoint {
    cardinality one
    method POST
    path "customOneQueryAction"
    action {
      execute {
        virtual input userId { type integer }
        responds
        hook {
          arg name name
          arg user query { from Org, filter {id is 1}, select {name} }
          source customActionResponds from "hooks.js"
        }
      }
    }
  }


  // --- custom-one endpoints

  custom endpoint {
    cardinality one
    method GET
    path "customGet"
  }
  custom endpoint {
    cardinality one
    method PATCH
    path "customUpdate"
    action {
      update {}
    }
  }
  custom endpoint {
    cardinality one
    method DELETE
    path "customDelete"
    action {
      delete {}
    }
  }

  // --- custom-many endpoints

  custom endpoint {
    cardinality many
    method GET
    path "customList"
  }
  custom endpoint {
    cardinality many
    method POST
    path "customCreate"
    action {
      create {}
    }
  }

  // --- regular endpoints

  get endpoint {}
  list endpoint {}
  create endpoint {
    action {
      create org {}
    }
  }
  update endpoint {
    action {
      update org {}
    }
  }
  delete endpoint {}


  // --- Repos
  entrypoint Repos {
    target relation repos as repo
    response { id, slug, description, org_id }

    get endpoint {}
    list endpoint {}
    create endpoint {
      action {
        create repo {
          set latest_num 0
          virtual input raw_description { type text }
          set description concat("Description: ", raw_description)
          set slug hook {
            arg org org.name
            source randomSlug from "hooks.js"
          }
        }
      }
    }
    update endpoint {
      action {
        update repo {}
      }
    }
    delete endpoint {}

    // Issues
    entrypoint Issues {
      target relation issues as issue
      response { id, title, repo, number, comments }

      get endpoint {}
      create endpoint {
        action {
          create issue as issue {
            set number repo.latest_num + 1
          }

          update repo as repo2 {
            set latest_num repo.latest_num + 1
          }

          create issue.comments as c {}
        }
      }
    }
  }
}
