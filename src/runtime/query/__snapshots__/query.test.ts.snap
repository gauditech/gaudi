// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
{
  "filter": {
    "args": [
      {
        "kind": "alias",
        "namePath": [
          "Org",
          "repos",
          "is_public",
        ],
      },
      {
        "kind": "literal",
        "type": "boolean",
        "value": true,
      },
    ],
    "kind": "function",
    "name": "is",
  },
  "fromPath": [
    "Org",
    "repos",
    "issues",
  ],
  "kind": "query",
  "limit": undefined,
  "modelRefKey": "Org",
  "name": "issues",
  "offset": undefined,
  "orderBy": undefined,
  "refKey": "Org.issues",
  "retType": "Issue",
  "select": [],
}
`;

exports[`Endpoint queries Deeply nested entrypoints test create endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "kind": "alias",
          "namePath": [
            "Org",
            "slug",
          ],
        },
        {
          "kind": "variable",
          "name": "org_slug",
          "type": {
            "nullable": false,
            "type": "text",
          },
        },
      ],
      "kind": "function",
      "name": "is",
    },
    "fromPath": [
      "Org",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_0",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Org",
          "id",
        ],
        "refKey": "Org.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Org",
                "repos",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "repo_id",
              "type": {
                "nullable": false,
                "type": "integer",
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Org",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "@context_ids",
              "type": {
                "nullable": false,
                "type": "list-integer",
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Org",
      "repos",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_1",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Org",
          "repos",
          "id",
        ],
        "refKey": "Repo.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "alias",
          "namePath": [
            "Repo",
            "id",
          ],
        },
        {
          "kind": "variable",
          "name": "@context_ids",
          "type": {
            "nullable": false,
            "type": "list-integer",
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Repo",
      "issues",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Repo",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Repo",
          "issues",
          "id",
        ],
        "refKey": "Issue.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "alias",
          "namePath": [
            "Issue",
            "id",
          ],
        },
        {
          "kind": "variable",
          "name": "@context_ids",
          "type": {
            "nullable": false,
            "type": "list-integer",
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Issue",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Issue",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Issue",
          "id",
        ],
        "refKey": "Issue.id",
      },
      {
        "alias": "name",
        "kind": "field",
        "name": "name",
        "namePath": [
          "Issue",
          "name",
        ],
        "refKey": "Issue.name",
      },
      {
        "alias": "repo_id",
        "kind": "field",
        "name": "repo_id",
        "namePath": [
          "Issue",
          "repo_id",
        ],
        "refKey": "Issue.repo_id",
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test create endpoint 2`] = `
[
  "SELECT
  "Org"."id" AS "id"
FROM
  "org" AS "Org"
WHERE
  "Org"."slug" = :org_slug


",
  "SELECT
  "Org.repos"."id" AS "id"
FROM
  "org" AS "Org"
  JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
WHERE
  "Org.repos"."id" = :repo_id
  AND "Org"."id" IN :@context_ids


",
  "SELECT
  "Repo.issues"."id" AS "id"
FROM
  "repo" AS "Repo"
  JOIN "issue" AS "Repo.issues" ON "Repo"."id" = "Repo.issues"."repo_id"
WHERE
  "Repo"."id" IN :@context_ids


",
  "SELECT
  "Issue"."id" AS "id",
  "Issue"."name" AS "name",
  "Issue"."repo_id" AS "repo_id"
FROM
  "issue" AS "Issue"
WHERE
  "Issue"."id" IN :@context_ids


",
]
`;

exports[`Endpoint queries Deeply nested entrypoints test create endpoint 3`] = `
{
  "alias": "$target_2",
  "kind": "relation",
  "name": "issues",
  "namePath": [
    "Org",
    "repos",
    "issues",
  ],
  "refKey": "Repo.issues",
  "retType": "Issue",
  "select": [],
}
`;

exports[`Endpoint queries Deeply nested entrypoints test create endpoint 4`] = `
[
  {
    "alias": "$target_0",
    "identifyWith": {
      "name": "slug",
      "paramName": "org_slug",
      "refKey": "Org.slug",
      "type": "text",
    },
    "kind": "model",
    "name": "Org",
    "namePath": [
      "Org",
    ],
    "refKey": "Org",
    "retType": "Org",
    "select": [],
  },
  {
    "alias": "$target_1",
    "identifyWith": {
      "name": "id",
      "paramName": "repo_id",
      "refKey": "Repo.id",
      "type": "integer",
    },
    "kind": "relation",
    "name": "repos",
    "namePath": [
      "Org",
      "repos",
    ],
    "refKey": "Org.repos",
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Org",
          "repos",
          "id",
        ],
        "refKey": "Repo.id",
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test delete endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "kind": "alias",
          "namePath": [
            "Org",
            "slug",
          ],
        },
        {
          "kind": "variable",
          "name": "org_slug",
          "type": {
            "nullable": false,
            "type": "text",
          },
        },
      ],
      "kind": "function",
      "name": "is",
    },
    "fromPath": [
      "Org",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_0",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Org",
          "id",
        ],
        "refKey": "Org.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Org",
                "repos",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "repo_id",
              "type": {
                "nullable": false,
                "type": "integer",
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Org",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "@context_ids",
              "type": {
                "nullable": false,
                "type": "list-integer",
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Org",
      "repos",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_1",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Org",
          "repos",
          "id",
        ],
        "refKey": "Repo.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Repo",
                "issues",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "issue_id",
              "type": {
                "nullable": false,
                "type": "integer",
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Repo",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "@context_ids",
              "type": {
                "nullable": false,
                "type": "list-integer",
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Repo",
      "issues",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Repo",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Repo",
          "issues",
          "id",
        ],
        "refKey": "Issue.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "alias",
          "namePath": [
            "Issue",
            "id",
          ],
        },
        {
          "kind": "variable",
          "name": "@context_ids",
          "type": {
            "nullable": false,
            "type": "list-integer",
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Issue",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Issue",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Issue",
          "id",
        ],
        "refKey": "Issue.id",
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test delete endpoint 2`] = `
[
  "SELECT
  "Org"."id" AS "id"
FROM
  "org" AS "Org"
WHERE
  "Org"."slug" = :org_slug


",
  "SELECT
  "Org.repos"."id" AS "id"
FROM
  "org" AS "Org"
  JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
WHERE
  "Org.repos"."id" = :repo_id
  AND "Org"."id" IN :@context_ids


",
  "SELECT
  "Repo.issues"."id" AS "id"
FROM
  "repo" AS "Repo"
  JOIN "issue" AS "Repo.issues" ON "Repo"."id" = "Repo.issues"."repo_id"
WHERE
  "Repo.issues"."id" = :issue_id
  AND "Repo"."id" IN :@context_ids


",
  "SELECT
  "Issue"."id" AS "id"
FROM
  "issue" AS "Issue"
WHERE
  "Issue"."id" IN :@context_ids


",
]
`;

exports[`Endpoint queries Deeply nested entrypoints test delete endpoint 3`] = `
{
  "alias": "$target_2",
  "identifyWith": {
    "name": "id",
    "paramName": "issue_id",
    "refKey": "Issue.id",
    "type": "integer",
  },
  "kind": "relation",
  "name": "issues",
  "namePath": [
    "Org",
    "repos",
    "issues",
  ],
  "refKey": "Repo.issues",
  "retType": "Issue",
  "select": [],
}
`;

exports[`Endpoint queries Deeply nested entrypoints test delete endpoint 4`] = `
[
  {
    "alias": "$target_0",
    "identifyWith": {
      "name": "slug",
      "paramName": "org_slug",
      "refKey": "Org.slug",
      "type": "text",
    },
    "kind": "model",
    "name": "Org",
    "namePath": [
      "Org",
    ],
    "refKey": "Org",
    "retType": "Org",
    "select": [],
  },
  {
    "alias": "$target_1",
    "identifyWith": {
      "name": "id",
      "paramName": "repo_id",
      "refKey": "Repo.id",
      "type": "integer",
    },
    "kind": "relation",
    "name": "repos",
    "namePath": [
      "Org",
      "repos",
    ],
    "refKey": "Org.repos",
    "retType": "Repo",
    "select": [],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test get endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "kind": "alias",
          "namePath": [
            "Org",
            "slug",
          ],
        },
        {
          "kind": "variable",
          "name": "org_slug",
          "type": {
            "nullable": false,
            "type": "text",
          },
        },
      ],
      "kind": "function",
      "name": "is",
    },
    "fromPath": [
      "Org",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_0",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Org",
          "id",
        ],
        "refKey": "Org.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Org",
                "repos",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "repo_id",
              "type": {
                "nullable": false,
                "type": "integer",
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Org",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "@context_ids",
              "type": {
                "nullable": false,
                "type": "list-integer",
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Org",
      "repos",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_1",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Org",
          "repos",
          "id",
        ],
        "refKey": "Repo.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Repo",
                "issues",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "issue_id",
              "type": {
                "nullable": false,
                "type": "integer",
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Repo",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "@context_ids",
              "type": {
                "nullable": false,
                "type": "list-integer",
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Repo",
      "issues",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Repo",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Repo",
          "issues",
          "id",
        ],
        "refKey": "Issue.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "alias",
          "namePath": [
            "Issue",
            "id",
          ],
        },
        {
          "kind": "variable",
          "name": "@context_ids",
          "type": {
            "nullable": false,
            "type": "list-integer",
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Issue",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Issue",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Issue",
          "id",
        ],
        "refKey": "Issue.id",
      },
      {
        "alias": "name",
        "kind": "field",
        "name": "name",
        "namePath": [
          "Issue",
          "name",
        ],
        "refKey": "Issue.name",
      },
      {
        "alias": "repo_id",
        "kind": "field",
        "name": "repo_id",
        "namePath": [
          "Issue",
          "repo_id",
        ],
        "refKey": "Issue.repo_id",
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test get endpoint 2`] = `
[
  "SELECT
  "Org"."id" AS "id"
FROM
  "org" AS "Org"
WHERE
  "Org"."slug" = :org_slug


",
  "SELECT
  "Org.repos"."id" AS "id"
FROM
  "org" AS "Org"
  JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
WHERE
  "Org.repos"."id" = :repo_id
  AND "Org"."id" IN :@context_ids


",
  "SELECT
  "Repo.issues"."id" AS "id"
FROM
  "repo" AS "Repo"
  JOIN "issue" AS "Repo.issues" ON "Repo"."id" = "Repo.issues"."repo_id"
WHERE
  "Repo.issues"."id" = :issue_id
  AND "Repo"."id" IN :@context_ids


",
  "SELECT
  "Issue"."id" AS "id",
  "Issue"."name" AS "name",
  "Issue"."repo_id" AS "repo_id"
FROM
  "issue" AS "Issue"
WHERE
  "Issue"."id" IN :@context_ids


",
]
`;

exports[`Endpoint queries Deeply nested entrypoints test get endpoint 3`] = `
{
  "alias": "$target_2",
  "identifyWith": {
    "name": "id",
    "paramName": "issue_id",
    "refKey": "Issue.id",
    "type": "integer",
  },
  "kind": "relation",
  "name": "issues",
  "namePath": [
    "Org",
    "repos",
    "issues",
  ],
  "refKey": "Repo.issues",
  "retType": "Issue",
  "select": [],
}
`;

exports[`Endpoint queries Deeply nested entrypoints test get endpoint 4`] = `
[
  {
    "alias": "$target_0",
    "identifyWith": {
      "name": "slug",
      "paramName": "org_slug",
      "refKey": "Org.slug",
      "type": "text",
    },
    "kind": "model",
    "name": "Org",
    "namePath": [
      "Org",
    ],
    "refKey": "Org",
    "retType": "Org",
    "select": [],
  },
  {
    "alias": "$target_1",
    "identifyWith": {
      "name": "id",
      "paramName": "repo_id",
      "refKey": "Repo.id",
      "type": "integer",
    },
    "kind": "relation",
    "name": "repos",
    "namePath": [
      "Org",
      "repos",
    ],
    "refKey": "Org.repos",
    "retType": "Repo",
    "select": [],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test list endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "kind": "alias",
          "namePath": [
            "Org",
            "slug",
          ],
        },
        {
          "kind": "variable",
          "name": "org_slug",
          "type": {
            "nullable": false,
            "type": "text",
          },
        },
      ],
      "kind": "function",
      "name": "is",
    },
    "fromPath": [
      "Org",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_0",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Org",
          "id",
        ],
        "refKey": "Org.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Org",
                "repos",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "repo_id",
              "type": {
                "nullable": false,
                "type": "integer",
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Org",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "@context_ids",
              "type": {
                "nullable": false,
                "type": "list-integer",
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Org",
      "repos",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_1",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Org",
          "repos",
          "id",
        ],
        "refKey": "Repo.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "alias",
          "namePath": [
            "Repo",
            "id",
          ],
        },
        {
          "kind": "variable",
          "name": "@context_ids",
          "type": {
            "nullable": false,
            "type": "list-integer",
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Repo",
      "issues",
    ],
    "kind": "query",
    "limit": {
      "kind": "variable",
      "name": "limit",
      "type": {
        "nullable": false,
        "type": "integer",
      },
    },
    "modelRefKey": "Repo",
    "name": "$target_2",
    "offset": {
      "kind": "variable",
      "name": "offset",
      "type": {
        "nullable": false,
        "type": "integer",
      },
    },
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Repo",
          "issues",
          "id",
        ],
        "refKey": "Issue.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "alias",
          "namePath": [
            "Repo",
            "id",
          ],
        },
        {
          "kind": "variable",
          "name": "@context_ids",
          "type": {
            "nullable": false,
            "type": "list-integer",
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Repo",
      "issues",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Repo",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": [
      {
        "direction": "asc",
        "exp": {
          "kind": "alias",
          "namePath": [
            "Repo",
            "issues",
            "id",
          ],
        },
      },
    ],
    "refKey": "N/A",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Repo",
          "issues",
          "id",
        ],
        "refKey": "Issue.id",
      },
      {
        "alias": "name",
        "kind": "field",
        "name": "name",
        "namePath": [
          "Repo",
          "issues",
          "name",
        ],
        "refKey": "Issue.name",
      },
      {
        "alias": "repo_id",
        "kind": "field",
        "name": "repo_id",
        "namePath": [
          "Repo",
          "issues",
          "repo_id",
        ],
        "refKey": "Issue.repo_id",
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test list endpoint 2`] = `
[
  "SELECT
  "Org"."id" AS "id"
FROM
  "org" AS "Org"
WHERE
  "Org"."slug" = :org_slug


",
  "SELECT
  "Org.repos"."id" AS "id"
FROM
  "org" AS "Org"
  JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
WHERE
  "Org.repos"."id" = :repo_id
  AND "Org"."id" IN :@context_ids


",
  "SELECT
  "Repo.issues"."id" AS "id"
FROM
  "repo" AS "Repo"
  JOIN "issue" AS "Repo.issues" ON "Repo"."id" = "Repo.issues"."repo_id"
WHERE
  "Repo"."id" IN :@context_ids
LIMIT
  :limit
OFFSET
  :offset


",
  "SELECT
  "Repo.issues"."id" AS "id",
  "Repo.issues"."name" AS "name",
  "Repo.issues"."repo_id" AS "repo_id"
FROM
  "repo" AS "Repo"
  JOIN "issue" AS "Repo.issues" ON "Repo"."id" = "Repo.issues"."repo_id"
WHERE
  "Repo"."id" IN :@context_ids
ORDER BY
  "Repo.issues"."id" asc


",
]
`;

exports[`Endpoint queries Deeply nested entrypoints test list endpoint 3`] = `
{
  "alias": "$target_2",
  "kind": "relation",
  "name": "issues",
  "namePath": [
    "Org",
    "repos",
    "issues",
  ],
  "refKey": "Repo.issues",
  "retType": "Issue",
  "select": [],
}
`;

exports[`Endpoint queries Deeply nested entrypoints test list endpoint 4`] = `
[
  {
    "alias": "$target_0",
    "identifyWith": {
      "name": "slug",
      "paramName": "org_slug",
      "refKey": "Org.slug",
      "type": "text",
    },
    "kind": "model",
    "name": "Org",
    "namePath": [
      "Org",
    ],
    "refKey": "Org",
    "retType": "Org",
    "select": [],
  },
  {
    "alias": "$target_1",
    "identifyWith": {
      "name": "id",
      "paramName": "repo_id",
      "refKey": "Repo.id",
      "type": "integer",
    },
    "kind": "relation",
    "name": "repos",
    "namePath": [
      "Org",
      "repos",
    ],
    "refKey": "Org.repos",
    "retType": "Repo",
    "select": [],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test update endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "kind": "alias",
          "namePath": [
            "Org",
            "slug",
          ],
        },
        {
          "kind": "variable",
          "name": "org_slug",
          "type": {
            "nullable": false,
            "type": "text",
          },
        },
      ],
      "kind": "function",
      "name": "is",
    },
    "fromPath": [
      "Org",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_0",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Org",
          "id",
        ],
        "refKey": "Org.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Org",
                "repos",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "repo_id",
              "type": {
                "nullable": false,
                "type": "integer",
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Org",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "@context_ids",
              "type": {
                "nullable": false,
                "type": "list-integer",
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Org",
      "repos",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_1",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Org",
          "repos",
          "id",
        ],
        "refKey": "Repo.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Repo",
                "issues",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "issue_id",
              "type": {
                "nullable": false,
                "type": "integer",
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "alias",
              "namePath": [
                "Repo",
                "id",
              ],
            },
            {
              "kind": "variable",
              "name": "@context_ids",
              "type": {
                "nullable": false,
                "type": "list-integer",
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Repo",
      "issues",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Repo",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Repo",
          "issues",
          "id",
        ],
        "refKey": "Issue.id",
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "alias",
          "namePath": [
            "Issue",
            "id",
          ],
        },
        {
          "kind": "variable",
          "name": "@context_ids",
          "type": {
            "nullable": false,
            "type": "list-integer",
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Issue",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Issue",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Issue",
          "id",
        ],
        "refKey": "Issue.id",
      },
      {
        "alias": "name",
        "kind": "field",
        "name": "name",
        "namePath": [
          "Issue",
          "name",
        ],
        "refKey": "Issue.name",
      },
      {
        "alias": "repo_id",
        "kind": "field",
        "name": "repo_id",
        "namePath": [
          "Issue",
          "repo_id",
        ],
        "refKey": "Issue.repo_id",
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test update endpoint 2`] = `
[
  "SELECT
  "Org"."id" AS "id"
FROM
  "org" AS "Org"
WHERE
  "Org"."slug" = :org_slug


",
  "SELECT
  "Org.repos"."id" AS "id"
FROM
  "org" AS "Org"
  JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
WHERE
  "Org.repos"."id" = :repo_id
  AND "Org"."id" IN :@context_ids


",
  "SELECT
  "Repo.issues"."id" AS "id"
FROM
  "repo" AS "Repo"
  JOIN "issue" AS "Repo.issues" ON "Repo"."id" = "Repo.issues"."repo_id"
WHERE
  "Repo.issues"."id" = :issue_id
  AND "Repo"."id" IN :@context_ids


",
  "SELECT
  "Issue"."id" AS "id",
  "Issue"."name" AS "name",
  "Issue"."repo_id" AS "repo_id"
FROM
  "issue" AS "Issue"
WHERE
  "Issue"."id" IN :@context_ids


",
]
`;

exports[`Endpoint queries Deeply nested entrypoints test update endpoint 3`] = `
{
  "alias": "$target_2",
  "identifyWith": {
    "name": "id",
    "paramName": "issue_id",
    "refKey": "Issue.id",
    "type": "integer",
  },
  "kind": "relation",
  "name": "issues",
  "namePath": [
    "Org",
    "repos",
    "issues",
  ],
  "refKey": "Repo.issues",
  "retType": "Issue",
  "select": [
    {
      "alias": "id",
      "kind": "field",
      "name": "id",
      "namePath": [
        "Org",
        "repos",
        "issues",
        "id",
      ],
      "refKey": "Issue.id",
    },
  ],
}
`;

exports[`Endpoint queries Deeply nested entrypoints test update endpoint 4`] = `
[
  {
    "alias": "$target_0",
    "identifyWith": {
      "name": "slug",
      "paramName": "org_slug",
      "refKey": "Org.slug",
      "type": "text",
    },
    "kind": "model",
    "name": "Org",
    "namePath": [
      "Org",
    ],
    "refKey": "Org",
    "retType": "Org",
    "select": [],
  },
  {
    "alias": "$target_1",
    "identifyWith": {
      "name": "id",
      "paramName": "repo_id",
      "refKey": "Repo.id",
      "type": "integer",
    },
    "kind": "relation",
    "name": "repos",
    "namePath": [
      "Org",
      "repos",
    ],
    "refKey": "Org.repos",
    "retType": "Repo",
    "select": [],
  },
]
`;

exports[`Orderby, limit and offset supports orderby, limit and offset in batching query 1`] = `
[
  {
    "filter": undefined,
    "fromPath": [
      "Org",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "test",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Org",
    "select": [],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "alias",
          "namePath": [
            "Org",
            "id",
          ],
        },
        {
          "kind": "variable",
          "name": "@context_ids",
          "type": {
            "nullable": false,
            "type": "list-integer",
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Org",
      "recent_repos",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "recent_repos",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Org",
          "recent_repos",
          "id",
        ],
        "refKey": "Repo.id",
      },
      {
        "alias": "__join_connection",
        "kind": "field",
        "name": "id",
        "namePath": [
          "Org",
          "id",
        ],
        "refKey": "Org.id",
      },
    ],
  },
]
`;

exports[`Orderby, limit and offset supports orderby, limit and offset in batching query 2`] = `
"SELECT
FROM
  "org" AS "Org"


SELECT
  "Org.recent_repos"."id" AS "id",
  "Org"."id" AS "__join_connection"
FROM
  "org" AS "Org"
  JOIN (
    SELECT
      *
    FROM
      (
        SELECT
          "Org.repos"."id" AS "id",
          "Org.repos"."org_id" AS "org_id",
          "Org"."id" AS "__join_connection",
          ROW_NUMBER() OVER (
            PARTITION BY
              "Org"."id"
            ORDER BY
              "Org.repos"."id" desc
          ) AS "__row_number"
        FROM
          "org" AS "Org"
          JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
      ) as topn
    WHERE
      topn."__row_number" <= (10 + 5)
      AND topn."__row_number" > 5
  ) AS "Org.recent_repos" ON "Org"."id" = "Org.recent_repos"."__join_connection"
WHERE
  "Org"."id" IN :@context_ids"
`;

exports[`Orderby, limit and offset supports orderby, limit and offset in non-batching query 1`] = `
"SELECT
FROM
  "org" AS "Org"
  JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
ORDER BY
  "Org.repos"."id" desc
LIMIT
  10
OFFSET
  5"
`;
