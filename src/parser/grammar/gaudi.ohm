Gaudi {
  Definition
    = NewlineBody<(Model | Entrypoint | Populator | ExecutionRuntime), ";">

  // Override Ohm's built-in definition of space.
  space += comment



  // ********************
  // Model grammar
  // ********************

  Model = "auth"? "model" IdentifierWithAs "{" NewlineBody<ModelBody, ";"> "}"

  ModelBody
    = Field
    | Reference
    | Relation
    | Query
    | Computed
    | Hook

  Field
    = "field" identifier "{" NonemptyNewlineBody<FieldBody, ","> "}"

  FieldBody
    = "type" identifier -- type
    | "default" literal -- default // we allow only literals for now
    | ("nullable" | "unique") -- tag
    | "validate" "{" NonemptyNewlineBody<Validator, ","> "}" -- validate

  Validator
    = Hook -- hook
    | identifier literal* -- builtin

  Reference
    = "reference" identifier "{" NonemptyNewlineBody<ReferenceBody, ","> "}"

  ReferenceBody
    = "to" identifier -- to
    | ("nullable" | "unique") -- tag

  Relation
    = "relation" identifier "{" NonemptyNewlineBody<RelationBody, ","> "}"

  RelationBody
    = "from" identifier -- from
    | "through" identifier -- through

  Query
    = "query" identifier "{" NonemptyNewlineBody<QueryBody, ","> "}"

  QueryBody
    = "from" IdentifierPathWithAs                   -- from
    | "filter" OptionalBraces<QueryExp>             -- filter
    | "order" "by" NonemptyListOf<QueryOrder, ",">  -- order_by
    | "limit" integer                               -- limit
    | "offset" integer                              -- offset
    | "select" SelectBody                           -- select
    | AggregateFn                                   -- aggregate

  AggregateFn = "count" | "sum"

  QueryOrder = IdentifierPath ("asc" | "desc")?

  Computed
    = "computed" identifier "{" QueryExp "}"

  QueryExp = OrExp

  OrExp
    = OrExp or AndExp       -- or
    | AndExp

  AndExp
    = AndExp and IsExp      -- and
    | IsExp

  IsExp
    = IsExp is not InExp      -- is_not
    | IsExp is InExp          -- is
    | InExp

  InExp
    = InExp not in OpExp       -- not_in
    | InExp in OpExp           -- in
    | OpExp

  OpExp
    = OpExp Operator FnExp     -- operator
    | FnExp

  FnExp
    = identifier "(" ListOf<QueryExp, ","> ")"    -- fn
    | PrimaryExp

  Operator = "<=" | "<" | ">=" | ">" | "+" | "-" | "/" | "*"

  PrimaryExp
    = "(" QueryExp ")" -- paren
    | not PrimaryExp -- not
    | literal -- literal
    | IdentifierPath -- identifier



  // ********************
  // Entrypoint grammar
  // ********************

  Entrypoint = "entrypoint" identifier "{" NewlineBody<EntrypointBody, ";"> "}"

  EntrypointBody
    = "target" ("model" | "relation") IdentifierWithAs -- target
    | "identify" "with" identifier -- identify
    | "response" SelectBody -- response
    | "authorize" "{" QueryExp "}" -- authorize
    | Endpoint -- endpoint
    | Entrypoint -- entrypoint

  SelectBody = "{" NewlineBody<Select, ","> "}"
  Select
    = identifier SelectBody -- nested
    | identifier -- single

  Endpoint = EndpointType "endpoint" "{" NewlineBody<EndpointBody, ";"> "}"

  EndpointType
    = "list"
    | "get"
    | "create"
    | "update"
    | "delete"
    | "custom"

  EndpointMethod
   = "GET"
   | "POST"
   | "PATCH"
   | "DELETE"

  EndpointCardinality = "one" | "many"

  EndpointBody
    = "action" "{" NewlineBody<ActionBody, ";"> "}"     -- action_block
    | "authorize" "{" QueryExp "}"                      -- authorize
    | "cardinality" EndpointCardinality                 -- cardinality
    | "method" EndpointMethod                           -- method
    | "path" string                                     -- path


  VirtualInputBody
    = "type" identifier                                       -- type
    | "nullable"                                              -- nullable
    | "optional"                                              -- optional
    | "validate" "{" NonemptyNewlineBody<Validator, ","> "}"  -- validate


  ActionKind = "create" | "update" | "delete" | "execute"
  ActionBody
    = ActionKind "{" NewlineBody<ActionAtomBody, ";"> "}"                                     -- default
    | ActionKind IdentifierPath "{" NewlineBody<ActionAtomBody, ";"> "}"                      -- named
    | ActionKind IdentifierPath "as" identifier "{" NewlineBody<ActionAtomBody, ";"> "}"      -- aliased


  ActionAtomBody
    = "set" identifier Hook                                                         -- set_hook
    | "set" identifier QueryExp                                                     -- set_expression
    | "reference" identifier "through" identifier                                   -- reference
    | "virtual input" identifier "{" NonemptyNewlineBody<VirtualInputBody, ","> "}" -- virtual_input
    | "input" "{" NewlineBody<ActionInputAtom, ","> "}"                             -- input
    | "deny" DenyList                                                               -- deny
    | "responds"                                                                    -- responds
    | Hook                                                                          -- hook
    | ActionBody                                                                    -- nested_action

  ActionInputAtom
    = identifier "{" NewlineBody<ActionInputOpt, ","> "}" -- field_with_opts
    | identifier                                          -- field

  ActionInputOpt
    = "optional"                  -- optional
    | "default" literal           -- default_value
    | "default" IdentifierPath    -- default_reference

  DenyList
    = "*"                                         -- all
    | "{" NewlineBody<identifier, ","> "}"        -- some

  // ********************
  // Hook grammar
  // ********************

  Hook
  = "hook" identifier? "{" NonemptyNewlineBody<HookBody, ";"> "}"

  HookBody
  = "default" "arg" identifier          -- argument_default
  | "arg" identifier HookQuery          -- argument_query
  | "arg" identifier QueryExp           -- argument_expression
  | "returns" identifier                -- return_type
  | "source" identifier "from" string   -- source
  | "inline" multiLineString            -- inline
  | "runtime" identifier                -- executionRuntime

  HookQuery
    = "query" "{" NonemptyNewlineBody<QueryBody, ","> "}"

  IdentifierPath = identifier ("." identifier)*

  IdentifierWithAs
    = identifier "as" identifier -- identifier_as
    | identifier -- identifier

  IdentifierPathWithAs
    = IdentifierPath "as" IdentifierPath -- identifier_as
    | IdentifierPath -- identifier

  literal (a literal) = null | boolean | integer | float | string

  boolean = true | false
  integer = digit+
  float = digit* "." digit*
  string = "\"" (~"\"" any)* "\""

  keywords = null | true | false | is | not | in
  null = "null" ~identifierPart
  true = "true" ~identifierPart
  false = "false" ~identifierPart
  or = "or" ~identifierPart
  and = "and" ~identifierPart
  is = "is" ~identifierPart
  not = "not" ~identifierPart
  in = "in" ~identifierPart

  identifier (an identifier) = identifierStart identifierPart*
  identifierStart = letter | "_" | "@"
  identifierPart = identifierStart | alnum

  OptionalBraces<Exp>
    = Exp -- no_braces
    | "{" Exp "}" -- braces

  NewlineBody<Exp, delimiter>
    = NonemptyNewlineBody<Exp, delimiter>
    | -- empty

  NonemptyNewlineBody<Exp, delimiter>
    = Exp (#delimiterOrNL<delimiter> Exp)* #delimiterOrNL<delimiter>?

  lineTerminator (a new line) = "\n" | "\r" | "\u2028" | "\u2029"

  delimiterOrNL<delimiter>
     = (~lineTerminator space)* (lineTerminator | delimiter)

  comment = multiLineComment | singleLineComment

  multiLineComment = "/*" (~"*/" any)* "*/"
  singleLineComment = "//" (~lineTerminator any)*

  multiLineString = "`" (~"`" any)* "`"


  // ********************
  // Populator grammar
  // ********************

  Populator
    = "populator" identifier "{" NonemptyNewlineBody<Populate, ";"> "}"

  Populate
    = "populate" identifier "{" NonemptyNewlineBody<PopulateBody, ";"> "}"

  PopulateBody
    = "target" ("model" | "relation") IdentifierWithAs    -- target
    | "identify" "with" identifier                        -- identify
    | "repeat" Repeater                                   -- repeat
    | "set" identifier Hook                               -- set_hook
    | "set" identifier QueryExp                           -- set_expression
    | Populate                                            -- populate

  Repeater
   = RepeaterBody "as" identifier -- aliased
   | RepeaterBody -- anonymous

  RepeaterBody
    = integer -- fixed
    | "{" NonemptyNewlineBody<RepeaterRangeAtom, ","> "}" -- range

  RepeaterRangeAtom
    = ("start" | "end") integer -- limits


  // ********************
  // Execution Runtime
  // ********************

  ExecutionRuntime
   = "runtime" identifier "{" NonemptyNewlineBody<ExecutionRuntimeBody, ","> "}"

  ExecutionRuntimeBody
   = "sourcePath" string  -- sourcePath
   | "default"            -- default
}
