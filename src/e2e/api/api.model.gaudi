runtime MyRuntime {
  source path "./src/e2e/api/hooks"
}

model Org {
  field name {
    type string,
    validate {
      hook {
        default arg name
        source noUnicode from "hooks.js"
      }
    }
  }
  field slug {
    type string,
    unique,
    validate {
      hook {
        default arg slug
        inline "!/\\s/.test(slug)"
      }
    }
  }
  field description { type string }

  relation repos { from Repo, through org }

  computed summary { name + description }

  query blank_repos {
    from repos,
    filter { is_public is true and total_issues is 0 },
    order by { id desc },
    limit 5
  }

  hook nameAndDesc {
    arg test query {
      select { name, description }
    }
    inline "test.name + ': ' + test.description"
  }
}


model Repo {
  reference org { to Org }

  field name { type string }
  field slug { type string, unique }
  field description { type string }
  field is_public { type boolean, default true }
  field latest_num { type integer }

  relation issues { from Issue, through repo }

  computed total_issues { count(issues.id) }
}


model Issue {
  reference repo { to Repo }

  field number { type integer }
  field title { type string }

  relation comments { from Comment, through issue }
}

model Comment {
  reference issue { to Issue }
  field body { type string }
}

// ----- entrypoints

// Orgs
entrypoint Org as org {
  identify { through slug }
  response { name, slug, description, summary, nameAndDesc, blank_repos { id, total_issues } }

  // --- endpoints with "execute" actions
  // register BEFORE other endpoints to avoid mismatching with other endpoints

  custom endpoint {
    cardinality one
    method POST
    path "customOneAction"
    action {
      execute {
        virtual input name { type string }
        virtual input counter { type integer }
        hook {
          arg name name
          arg counter counter
          source customAction from "hooks.js"
        }
      }
    }
  }

  custom endpoint {
    cardinality many
    method PATCH
    path "customManyAction"
    action {
      execute {
        virtual input name { type string }
        virtual input counter { type integer }
        hook {
          arg name name
          arg counter counter
          source customAction from "hooks.js"
        }
      }
    }
  }

  // custom one endpoint - "execute" action responds
  custom endpoint {
    cardinality one
    method POST
    path "customOneActionResponds"
    action {
      execute {
        virtual input counter { type integer }
        virtual input name { type string }

        responds
        hook {
          arg name name
          arg counter counter
          source customActionResponds from "hooks.js"
        }
      }
    }
  }

  // custom many endpoint - "execute" action responds
  custom endpoint {
    cardinality many
    method PATCH
    path "customManyActionResponds"
    action {
      execute {
        virtual input name { type string }
        virtual input counter { type integer }
        responds
        hook {
          arg name name
          arg counter counter
          source customActionResponds from "hooks.js"
        }
      }
    }
  }

  // custom ep/action with action query
  custom endpoint {
    cardinality one
    method POST
    path "customOneQueryAction"
    action {
      execute {
        virtual input name { type string }
        virtual input orgId { type integer }
        responds
        hook {
          arg inputName name
          arg inputOrgId orgId
          arg orgByName query { from Org as o, filter {lower(o.name) is lower(name)}, select {name} }
          arg orgById query { from Org as o, filter { o.id is orgId }, select {name} }
          // arg orgByInputId query { from Org as o, filter { o.id is inputOrgId }, select {name} }
          source customActionResponds from "hooks.js"
        }
      }
    }
  }

  // custom ep/action with action query
  custom endpoint {
    cardinality one
    method POST
    path "customFetchAction"
    action {
      fetch as fRepo {
        query { from Repo, filter { id is 1 }, select {slug}} // TODO: read from ctx - id
      }
      execute {
        virtual input name { type string }
        responds
        hook {
          arg name name
          arg repoSlug fRepo.slug
          source customActionResponds from "hooks.js"
        }
      }
    }
  }

  // hook error response
  custom endpoint {
    path "hookErrorResponse"
    method POST
    cardinality many

    action {
      execute {
        virtual input status { type integer }
        virtual input message { type string }

        hook {
          arg status status
          arg message message

          source customHttpErrorResponse from "hooks.js"
        }
      }
    }
  }

  // --- custom-one endpoints

  custom endpoint {
    cardinality one
    method GET
    path "customGet"
  }
  custom endpoint {
    cardinality one
    method PATCH
    path "customUpdate"
    action {
      update org as newOrg {}
    }
  }
  custom endpoint {
    cardinality one
    method DELETE
    path "customDelete"
    action {
      delete org {}
    }
  }

  // --- custom-many endpoints

  custom endpoint {
    cardinality many
    method GET
    path "customList"
  }
  custom endpoint {
    cardinality many
    method POST
    path "customCreate"
    action {
      create Org as newOrg {}
    }
  }

  // --- regular endpoints

  get endpoint {}
  list endpoint {
    pageable
    order by { slug desc }
  }
  create endpoint {
    action {
      create {}
    }
  }
  update endpoint {
    action {
      update {}
    }
  }
  delete endpoint {}


  // --- Repos
  entrypoint repos as repo {
    response { id, slug, description, org_id }

    get endpoint {}
    list endpoint {}
    create endpoint {
      action {
        create as repo {
          set latest_num 0
          virtual input raw_description { type string }
          set description "Description: " + raw_description
          set slug hook {
            arg org org.name
            source randomSlug from "hooks.js"
          }
        }
      }
    }
    update endpoint {
      action {
        update {}
      }
    }
    delete endpoint {}

    // Issues
    entrypoint issues as issue {
      response { id, title, repo, number, comments }

      get endpoint {}
      create endpoint {
        action {
          create as issue {
            set number repo.latest_num + 1
          }

          update repo as repo2 {
            set latest_num repo.latest_num + 1
          }

          create issue.comments as c {}
        }
      }
    }
  }
}

// --- Repos
entrypoint Repo {
  response { id, slug, description, org_id }

  list endpoint {
    // test filtered
    filter { is_public is true and org.slug is "org2" }
  }
  get endpoint {}
}
