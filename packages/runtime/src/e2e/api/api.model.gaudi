runtime MyRuntime {
  source path "./src/e2e/api/hooks"
}

validator noUnicode {
  arg value { type string }
  assert hook {
    arg name value
    source noUnicode from "hooks.js"
  }
  error { code "no-unicode" }
}

validator noSpaces {
  arg value { type string }
  assert hook {
    arg slug value
    inline "!/\\s/.test(slug)"
  }
  error { code "no-spaces" }
}

model Org {
  field name { type string, validate { noUnicode() } }
  field slug { type string, unique, validate { noSpaces() } }
  field description { type string }

  relation repos { from Repo, through org }

  computed summary { name + description }

  query blank_repos {
    from repos,
    filter { is_public is true and total_issues is 0 },
    order by { id desc },
    limit 5
  }

  query newest_repo {
    from repos,
    order by { id desc },
    first
  }

  computed newest_repo_name {
    newest_repo.name
  }

  hook nameAndDesc {
    arg test query {
      select { name, description }
    }
    inline "test.name + ': ' + test.description"
  }
}


model Repo {
  reference org { to Org }

  field name { type string }
  field slug { type string, unique }
  field description { type string }
  field is_public { type boolean, default true }
  field latest_num { type integer }

  relation issues { from Issue, through repo }

  computed total_issues { count(issues.id) }
}


model Issue {
  reference repo { to Repo }

  field number { type integer }
  field title { type string }

  relation comments { from Comment, through issue }
}

model Comment {
  reference issue { to Issue }
  field body { type string }
}

// ----- entrypoints

api {
  // Orgs
  entrypoint Org as org {
    identify { through slug }
    response { name, slug, description, summary, nameAndDesc, blank_repos { id, total_issues, nameAndDesc: name + " " + description }, newest_repo_name }

    // --- endpoints with "execute" actions
    // register BEFORE other endpoints to avoid mismatching with other endpoints

    custom endpoint {
      cardinality one
      method POST
      path "customOneAction"
      extra inputs {
        field name { type string }
        field counter { type integer }
        field customProp { type string }
      }
      action {
        // test custom action return value
        // take "customProp" extra input, return it to "customAlias" and add it back to response
        execute as customAlias {
          hook {
            arg prop customProp
            // returns struct: { prop }
            source echo from "hooks.js"
          }
        }

        execute {
          hook {
            arg name name
            arg counter counter
            // add "customProp" back to response
            arg customProp customAlias.prop
            source customAction from "hooks.js"
          }
        }
      }
    }

    custom endpoint {
      cardinality many
      method PATCH
      path "customManyAction"
      extra inputs {
        field name { type string }
        field counter { type integer }
      }
      action {
        execute {
          hook {
            arg name name
            arg counter counter
            source customAction from "hooks.js"
          }
        }
      }
    }

    // custom one endpoint - "execute" action responds
    custom endpoint {
      cardinality one
      method POST
      path "customOneActionResponds"
      extra inputs {
        field counter { type integer }
        field name { type string }
      }
      action {
        execute {
          responds
          hook {
            arg name name
            arg counter counter
            source customActionResponds from "hooks.js"
          }
        }
      }
    }

    // custom many endpoint - "execute" action responds
    custom endpoint {
      cardinality many
      method PATCH
      path "customManyActionResponds"
      extra inputs {
        field name { type string }
        field counter { type integer }
      }
      action {
        execute {
          responds
          hook {
            arg name name
            arg counter counter
            source customActionResponds from "hooks.js"
          }
        }
      }
    }

    // custom many endpoint - "respond" action with static response
    custom endpoint {
      cardinality many
      method PATCH
      path "customManyRespondActionStatic"
      action {
        respond {
          body "static response body"
          httpStatus 202
        }
      }
    }

    // custom many endpoint - "respond" action with simple response
    custom endpoint {
      cardinality many
      method PATCH
      path "customManyRespondActionSimple"
      extra inputs {
        field body { type string }
      }
      action {
        respond {
          body body
        }
      }
    }

    // custom many endpoint - "respond" action with complex response
    custom endpoint {
      cardinality many
      method PATCH
      path "customManyRespondActionComplex"
      extra inputs {
        field prop1 { type string }
        field prop2 { type integer }
        field statusCode { type integer }
        field header1 { type string }
        field header2 { type string }
      }
      action {
        execute as resp {
          hook {
            arg prop1 prop1
            arg prop2 prop2
            source echo from "hooks.js"
          }
        }

        respond {
          body resp
          httpStatus statusCode
          httpHeaders {
            "header-1" header1,
            "header-2" header2,
            "header-3" "deleted-header3",
            "header-12" [header1, header2], // multiple header values
            "header-3" null // removed header
          }
        }
      }
    }

    // custom ep/action with action query
    custom endpoint {
      cardinality one
      method POST
      path "customOneQueryAction"
      extra inputs {
        field name { type string }
        field orgId { type integer }
      }
      action {
        execute {
          responds
          hook {
            arg inputName name
            arg inputOrgId orgId
            arg orgByName query { from Org as o, filter {lower(o.name) is lower(name)}, select {name} }
            arg orgById query { from Org as o, filter { o.id is orgId }, select {name} }
            // arg orgByInputId query { from Org as o, filter { o.id is inputOrgId }, select {name} }
            source customActionResponds from "hooks.js"
          }
        }
      }
    }

    // custom ep/action with action query
    custom endpoint {
      cardinality one
      method POST
      path "customFetchAction"
      extra inputs {
        field name { type string }
      }
      action {
        query as fRepo { from Repo, filter { id is 1 }, select {slug}} // TODO: read from ctx - id
        execute {
          responds
          hook {
            arg name name
            arg repoSlug fRepo.slug
            source customActionResponds from "hooks.js"
          }
        }
      }
    }

    // hook error response
    custom endpoint {
      path "hookErrorResponse"
      method POST
      cardinality many
      extra inputs {
        field status { type integer }
        field message { type string }
      }
      action {
        execute {
          hook {
            arg status status
            arg message message

            source customHttpErrorResponse from "hooks.js"
          }
        }
      }
    }

    // --- custom-one endpoints

    custom endpoint {
      cardinality one
      method GET
      path "customGet"
    }
    custom endpoint {
      cardinality one
      method PATCH
      path "customUpdate"
      action {
        update org as newOrg {}
      }
    }
    custom endpoint {
      cardinality one
      method DELETE
      path "customDelete"
      action {
        delete org {}
      }
    }

    // --- custom-many endpoints

    custom endpoint {
      cardinality many
      method GET
      path "customList"
    }
    custom endpoint {
      cardinality many
      method POST
      path "customCreate"
      action {
        create Org as newOrg {}
      }
    }

    // --- regular endpoints

    get endpoint {}
    list endpoint {
      pageable
      order by { slug desc }
    }
    create endpoint {
      action {
        create {}
      }
    }
    update endpoint {
      action {
        update {}
      }
    }
    delete endpoint {}


    // --- Repos
    entrypoint repos as repo {
      response { id, slug, description, org_id }

      get endpoint {}
      list endpoint {}
      create endpoint {
        extra inputs {
          field raw_description { type string }
        }
        action {
          create as repo {
            set latest_num 0
            input { description { default "Description: " + raw_description } }
            set slug hook {
              arg org org.name
              arg sequence [1,2,3]
              source randomSlug from "hooks.js"
            }
          }
        }
      }
      update endpoint {
        action {
          update {}
        }
      }
      delete endpoint {}

      // Issues
      entrypoint issues as issue {
        response { id, title, repo, number, comments }

        get endpoint {}
        create endpoint {
          action {
            create as issue {
              set number repo.latest_num + 1
            }

            update repo as repo2 {
              deny *
              set latest_num repo.latest_num + 1
            }

            create issue.comments as c {}
          }
        }
      }
    }
  }

  // --- Repos
  entrypoint Repo {
    response { id, slug, description, org_id }

    list endpoint {
      // test filtered
      filter { is_public is true and org.slug is "org2" }
    }
    get endpoint {}
  }
}
