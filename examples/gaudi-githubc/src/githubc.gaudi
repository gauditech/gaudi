// database {
//     engine pg
//     uri 'postgresql://postgres@localhost:5342'
// }

runtime HooksRuntime {
    source path "hooks"
}

generate client {
  target js
  api entrypoint
  output "src/web/js"
}

// ----- models

model Org {
    field name {
        type string,
        validate {
            hook {
                default arg name
                source noUnicode from "githubc.js"
            }
        }
    }
    field slug {
        type string,
        unique,
        validate {
            hook { // hook can be named for documentation. Maybe use the name for hook code?
                default arg slug
                inline "!/\\s/.test(slug)"
            }
        }
    }
    field description { type string }
    field optOut { type string, nullable }

    relation repos { from Repo, through org }
    relation memberships { from OrgMembership, through org }

    query members { from memberships.user }
    query public_repos { from repos, filter { is_public is true } }
    query public_issues { from public_repos.issues }

    hook nameAndDesc {
        arg test query {
            select { name, description }
        }
        inline "test.name + ': ' + test.description"
    }
}

model OrgMembership {
    reference user { to User }
    reference org { to Org }
}

model Repo {
    reference org { to Org }

    field name { type string }
    field slug { type string, unique }
    field description { type string }
    field is_public { type boolean, default true }

    relation issues { from Issue, through repo }
}

model Issue {
    field title { type string }
    field body { type string }
    reference repo { to Repo }
}

// ----- start auth model
model User {
    field name { type string }
    relation authLocal { from UserAuthLocal, through user }
    relation accessToken { from UserAccessToken, through user }
    relation org_memberships { from OrgMembership, through user }
}
model UserAuthLocal {
    reference user { to User }
    field username { type string, unique }
    field password { type string }
}
model UserAccessToken {
    reference user { to User }
    field token { type string, unique }
    field expiryDate { type string }
}
// ----- end auth model

// ----- entrypoints

entrypoint Orgs {
    target Org as org
    identify with slug
    response { name, slug, description, repos { issues { title, body, repo { org } } }, members, public_repos, public_issues, nameAndDesc }

    get endpoint {}
    list endpoint { pageable }
    create endpoint {}
    update endpoint {}

    entrypoint Repos {
        target repos
        response { id, slug, description, org_id, issues { repo } }

        get endpoint {}
        list endpoint {}
        create endpoint {}
        update endpoint {}
        delete endpoint {}
    }

//    entrypoint PublicRepos {
//        target public_repos
//        response { id, slug, description, org_id }
//
//        get endpoint {}
//        list endpoint {}
//        // create endpoint {}
//    }
//
//    entrypoint AllIssues {
//        target public_issues
//        response { id, title, body }
//        list endpoint {}
//    }
//
//    entrypoint Members {
//        target members
//        response { id, name }
//        list endpoint {}
//        get endpoint {}
//    }
}

// ----- populators

populator Dev {
  // org without repos and users
  populate EmptyOrg {
    target Org as org

    // org
    set name "Organization 1"
    set slug "org-1"
    set description "Description of org-1"
    set optOut null
  }

  // org without repos and users
  populate OrgWith1RepoAnd1Member {
    target Org as org

    // org
    set name "Organization 2"
    set slug "org-2"
    set description hook {
        arg slug slug
        inline "'Description of ' + slug"
    }
    set optOut hook {
        arg slug slug
        inline "'Opt out from org ' + slug"
    }

    populate Repos {
        target repos as repo

        // fields
        set name concat("Repo 1 at ", org.slug)
        set slug hook {
            arg orgSlug org.slug
            inline "'repo-1-' + orgSlug"
        }
        set description hook {
            arg slug slug
            inline "'Description for ' + slug"
        }
        set is_public true
    }
  }

  // org without repos and users
  populate OrgWithMultipleReposAndMembers {
    target Org as org

    repeater iter { start 3, end 5 }

    // org
    set name hook {
        arg iter iter
        inline "'Organization ' + iter.current"
    }
    set slug hook {
        arg iter iter
        inline "'org-' + iter.current"
    }
    set description hook {
        arg slug slug
        inline "'Description of ' + slug"
    }
    set optOut hook {
        arg slug slug
        inline "'Opt out from org ' + slug"
    }

    populate Repos {
        target repos as repo

        repeater riter { start 1, end 3 }

        // fields
        set name hook {
            arg riter riter
            arg orgSlug org.slug
            inline "'Repo ' + riter.current + ' at ' + orgSlug"
        }
        set slug hook {
            arg riter riter
            arg orgSlug org.slug
            inline "'repo-' + riter.current + '-' + orgSlug"
        }
        set description hook {
            arg slug slug
            inline "'Description for ' + slug"
        }
        set is_public true
    }
  }
}
