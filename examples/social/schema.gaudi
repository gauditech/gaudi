database db {
    default
    engine pg
    uri "postgresql://postgres@localhost:5432/gaudi"
}

model Auth {
    auth using gaudi/email_password # this is a plugin!
}

model User [as this] {
    reference auth Auth unique
    field full_name text
    field is_enabled boolean default true
    relation groups GroupMembership.group
    relation pending_group_applications GroupApplication through user {
        relation group.members filter this is not in members
    }

    relation pending_groups pending_group_applications.group
    relation all_posts Post
    relation posts Post filter parent_post is null
    relation comments Post filter parent_post is not null
    relation posts_commented_on comments.root_post filter {
        this is not author
    }

    state Active { is_enabled is true }
    # can build relations using User.Active

    # serializer starting point? all the fields? HELP needs more work
    default serializer { omit auth }
    serializer JustName { pick full_name }
}

model Post {
    reference author User
    reference parent_post Post nullable
    field message text
    field posted_at datetime default now
    # computed root_post = recursive parent_post # filter parent_post is null # HELP!
    computed root_post {
        recursive parent_post
        filter { parent_post is null }
        first
    }
    # https://stackoverflow.com/questions/3699395/find-parent-recursively-using-query
    relation likes PostLike
    computed likes_count = count likes
    # FYI if there's an attribute `count` it should be in single quotes
    # because it's reserved keyword
    # alternatively we disallow it, feel free to use dbname to use it on db level thouth
    relation direct_comments Post through parent_post
    relation all_comments recursive direct_comments # HELP! 
}

model PostLike {
    reference post Post
    reference user User
    field liked_at datetime default now
}

model Group {
    field group_name text
    field created_at datetime default now
    relation all_memberships GroupMembership
    relation all_members all_memberships.user
    relation admins all_members filter is_admin is true
    relation regular_members all_members filter is_admin is false
    relation all_applications GroupApplication
    relation pending_applications all_applications filter admin_action is null
}

model GroupMembership {
    reference group Group
    reference user User
    field joined_at datetime default now
    field is_admin boolean default false
}

model GroupApplication {
    reference group Group
    reference user User
    field applied_at datetime default now
    field admin_action string one of {accepted, declined} default null
    reference admin User default null
}

### Problems

1. recursive needs work (fetch nested comments vs fetch flat comments vs fetch root vs fetch leaves)
2. nested relation with [as var] syntax
