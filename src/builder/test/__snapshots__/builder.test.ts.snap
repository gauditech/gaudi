// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`builder build DB schema renders DB schema template correctly 1`] = `
"generator client {
      provider = "prisma-client-js"
    }

    
    datasource db {
      provider = "DB_PROVIDER"
      url      = "DB_CONNECTION_URL"
    }

    model org {
id Int @id @unique @default(autoincrement())
name String
slug String @unique
description String
optout String?

repos repo[]


}
    model repo {
id Int @id @unique @default(autoincrement())
name String
slug String @unique
description String
org_id Int



org org @relation(fields: [org_id], references: [id])
}"
`;

exports[`builder build index renders index template correctly 1`] = `"require('./server/main.js');"`;

exports[`builder build package renders package template correctly 1`] = `
"{
  "name": "test",
  "description": "Test description",
  "version": "0.0.1",
  "main": "index.js",
  "scripts": {
    "start-server": "node index.js"
  },
  "engines": {
    "node": ">=16.15.0"
  },
  "dependencies": {
    "express": "^4.18.2",
    "prisma": "^4.4.0",
    "yup": "^0.32.11",
    "@prisma/client": "^4.4.0"
  }
}"
`;

exports[`builder build server renders server get endpoints correctly 1`] = `
"const yup = require("yup")
  const { endpointHandlerGuard, validateRecord, EndpointError } = require("./common.js");

  // setup endpoints
  const endpointConfigs = [];
  function setupEndpoints(app) {
    endpointConfigs.forEach((ep) => {
      app[ep.method](ep.path, endpointHandlerGuard(ep.handler));
    })
  } 

  // hello world endpoint
  function helloEndpoint(req, res) { res.send("Hello world!") }
  endpointConfigs.push({ path: '/hello', method: 'get', handler: helloEndpoint })

  // definition endpoints
  // --- getOrgsEndpoint
async function getOrgsEndpoint(req, resp) {
  // TODO: role auth
  // TODO: select
  // TODO: filter

  const ctx = new Map();

  // extract path vars
  ctx.set("org_slug", req.params["org_slug"])

  let result;
  try {
    result = await fetchSingleAction(ctx);

    // actions
    

    resp.send(result)
  } catch(err) {
    if (err instanceof EndpointError) {
      throw err;
    }
    else {
      throw new EndpointError(500, 'Error processing request: ' + err);
    }
  }
}
endpointConfigs.push({ path: "/org/:org_slug", method: "get", handler: getOrgsEndpoint })

  // ----- commons
  
  async function fetchSingleAction(ctx) {
    // TODO: execute query
    try {
      const schema = yup .object({   "org_id": yup.number() .required(),   "title": yup.string() .required() }) .required();
  
      const v = await validateRecord({
        org_id: 1, title: 'asdf'
      }, schema);
      console.log('VALID', v)
  
      return \`Example fetch-one action result \${new Date().toISOString()}\`
    }
    catch(err) {
      if (err instanceof EndpointError) {
        throw err
      }
      else {
        throw new EndpointError(404, { message: 'Not found' }, err)
      }
    }
  }

  async function fetchManyAction(ctx) {
    // TODO: execute query
    return [\`Example list action result \${new Date().toISOString()}\`]
  }

  // ----- export

  module.exports = {
    setupEndpoints
  }"
`;

exports[`builder build server renders server list endpoints correctly 1`] = `
"const yup = require("yup")
  const { endpointHandlerGuard, validateRecord, EndpointError } = require("./common.js");

  // setup endpoints
  const endpointConfigs = [];
  function setupEndpoints(app) {
    endpointConfigs.forEach((ep) => {
      app[ep.method](ep.path, endpointHandlerGuard(ep.handler));
    })
  } 

  // hello world endpoint
  function helloEndpoint(req, res) { res.send("Hello world!") }
  endpointConfigs.push({ path: '/hello', method: 'get', handler: helloEndpoint })

  // definition endpoints
  // listOrgsEndpoint
async function listOrgsEndpoint(req, resp) {
  // TODO: role auth
  // TODO: select
  // TODO: filter

  const ctx = new Map();

  

  let result;
  try {
    result = await fetchManyAction(ctx);

    

    resp.send(result)
  } catch(err) {
    if (err instanceof EndpointError) {
      throw err;
    }
    else {
      throw new EndpointError(500, 'Error processing request: ' + err);
    }
  }
}
endpointConfigs.push({ path: "/org", method: "get", handler: listOrgsEndpoint })

  // ----- commons
  
  async function fetchSingleAction(ctx) {
    // TODO: execute query
    try {
      const schema = yup .object({   "org_id": yup.number() .required(),   "title": yup.string() .required() }) .required();
  
      const v = await validateRecord({
        org_id: 1, title: 'asdf'
      }, schema);
      console.log('VALID', v)
  
      return \`Example fetch-one action result \${new Date().toISOString()}\`
    }
    catch(err) {
      if (err instanceof EndpointError) {
        throw err
      }
      else {
        throw new EndpointError(404, { message: 'Not found' }, err)
      }
    }
  }

  async function fetchManyAction(ctx) {
    // TODO: execute query
    return [\`Example list action result \${new Date().toISOString()}\`]
  }

  // ----- export

  module.exports = {
    setupEndpoints
  }"
`;

exports[`builder build server renders server template correctly 1`] = `
"const express = require("express");
const { requestLogger, errorLogger, errorResponder } = require("./common.js");
const { setupEndpoints } = require("./endpoints.js");

const app = express();
const port = 3001;

setupEndpoints(app);

app.use(requestLogger)
app.use(errorLogger)
app.use(errorResponder)

app.listen(port, () => {
  console.log(\`Example app listening on port \${port}\`);
});"
`;
