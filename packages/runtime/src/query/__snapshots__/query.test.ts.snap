// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
{
  "filter": {
    "args": [
      {
        "kind": "identifier-path",
        "namePath": [
          "Org",
          "repos",
          "is_public",
        ],
      },
      {
        "kind": "literal",
        "literal": {
          "kind": "boolean",
          "value": true,
        },
      },
    ],
    "kind": "function",
    "name": "is",
  },
  "fromPath": [
    "Org",
    "repos",
    "issues",
  ],
  "kind": "query",
  "limit": undefined,
  "modelRefKey": "Org",
  "name": "issues",
  "offset": undefined,
  "orderBy": undefined,
  "refKey": "Org.issues",
  "retCardinality": "collection",
  "retType": "Issue",
  "select": [],
}
`;

exports[`Endpoint queries Deeply nested entrypoints test create endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "slug",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "org_slug",
          ],
          "source": "pathParams",
          "type": {
            "kind": "string",
            "nullable": false,
          },
        },
      ],
      "kind": "function",
      "name": "is",
    },
    "fromPath": [
      "Org",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_0",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Org",
                "repos",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "repo_id",
              ],
              "source": "pathParams",
              "type": {
                "kind": "integer",
                "nullable": false,
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Org",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "@context_ids",
              ],
              "source": undefined,
              "type": {
                "kind": "collection",
                "type": {
                  "kind": "integer",
                  "nullable": false,
                },
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Org",
      "repos",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_1",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "repos",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Repo",
            "id",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "@context_ids",
          ],
          "source": undefined,
          "type": {
            "kind": "collection",
            "type": {
              "kind": "integer",
              "nullable": false,
            },
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Repo",
      "issues",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Repo",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Repo",
            "issues",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "id",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "@context_ids",
          ],
          "source": undefined,
          "type": {
            "kind": "collection",
            "type": {
              "kind": "integer",
              "nullable": false,
            },
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Issue",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Issue",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
      {
        "alias": "name",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "name",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "string",
          "nullable": false,
        },
      },
      {
        "alias": "repo_id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "repo_id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test create endpoint 2`] = `
[
  "SELECT
  "Org"."id" AS "id"
FROM
  "org" AS "Org"
WHERE
  "Org"."slug" = :pathParams.org_slug


",
  "SELECT
  "Org.repos"."id" AS "id"
FROM
  "org" AS "Org"
  INNER JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
WHERE
  "Org.repos"."id" = :pathParams.repo_id
  AND "Org"."id" IN :@context_ids


",
  "SELECT
  "Repo.issues"."id" AS "id"
FROM
  "repo" AS "Repo"
  INNER JOIN "issue" AS "Repo.issues" ON "Repo"."id" = "Repo.issues"."repo_id"
WHERE
  "Repo"."id" IN :@context_ids


",
  "SELECT
  "Issue"."id" AS "id",
  "Issue"."name" AS "name",
  "Issue"."repo_id" AS "repo_id"
FROM
  "issue" AS "Issue"
WHERE
  "Issue"."id" IN :@context_ids


",
]
`;

exports[`Endpoint queries Deeply nested entrypoints test create endpoint 3`] = `
{
  "alias": "$target_2",
  "kind": "relation",
  "name": "issues",
  "namePath": [
    "Org",
    "repos",
    "issues",
  ],
  "retType": "Issue",
  "select": [
    {
      "alias": "id",
      "expr": {
        "kind": "identifier-path",
        "namePath": [
          "Org",
          "repos",
          "issues",
          "id",
        ],
      },
      "kind": "expression",
      "type": {
        "kind": "integer",
        "nullable": false,
      },
    },
  ],
}
`;

exports[`Endpoint queries Deeply nested entrypoints test create endpoint 4`] = `
[
  {
    "alias": "$target_0",
    "identifyWith": {
      "paramName": "org_slug",
      "path": [
        "slug",
      ],
      "type": "string",
    },
    "kind": "model",
    "name": "Org",
    "namePath": [
      "Org",
    ],
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "alias": "$target_1",
    "identifyWith": {
      "paramName": "repo_id",
      "path": [
        "id",
      ],
      "type": "integer",
    },
    "kind": "relation",
    "name": "repos",
    "namePath": [
      "Org",
      "repos",
    ],
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "repos",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test delete endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "slug",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "org_slug",
          ],
          "source": "pathParams",
          "type": {
            "kind": "string",
            "nullable": false,
          },
        },
      ],
      "kind": "function",
      "name": "is",
    },
    "fromPath": [
      "Org",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_0",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Org",
                "repos",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "repo_id",
              ],
              "source": "pathParams",
              "type": {
                "kind": "integer",
                "nullable": false,
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Org",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "@context_ids",
              ],
              "source": undefined,
              "type": {
                "kind": "collection",
                "type": {
                  "kind": "integer",
                  "nullable": false,
                },
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Org",
      "repos",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_1",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "repos",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Repo",
                "issues",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "issue_id",
              ],
              "source": "pathParams",
              "type": {
                "kind": "integer",
                "nullable": false,
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Repo",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "@context_ids",
              ],
              "source": undefined,
              "type": {
                "kind": "collection",
                "type": {
                  "kind": "integer",
                  "nullable": false,
                },
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Repo",
      "issues",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Repo",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Repo",
            "issues",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "id",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "@context_ids",
          ],
          "source": undefined,
          "type": {
            "kind": "collection",
            "type": {
              "kind": "integer",
              "nullable": false,
            },
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Issue",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Issue",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Issue",
    "select": [
      {
        "alias": "__gaudi__target_id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test delete endpoint 2`] = `
[
  "SELECT
  "Org"."id" AS "id"
FROM
  "org" AS "Org"
WHERE
  "Org"."slug" = :pathParams.org_slug


",
  "SELECT
  "Org.repos"."id" AS "id"
FROM
  "org" AS "Org"
  INNER JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
WHERE
  "Org.repos"."id" = :pathParams.repo_id
  AND "Org"."id" IN :@context_ids


",
  "SELECT
  "Repo.issues"."id" AS "id"
FROM
  "repo" AS "Repo"
  INNER JOIN "issue" AS "Repo.issues" ON "Repo"."id" = "Repo.issues"."repo_id"
WHERE
  "Repo.issues"."id" = :pathParams.issue_id
  AND "Repo"."id" IN :@context_ids


",
  "SELECT
  "Issue"."id" AS "__gaudi__target_id"
FROM
  "issue" AS "Issue"
WHERE
  "Issue"."id" IN :@context_ids


",
]
`;

exports[`Endpoint queries Deeply nested entrypoints test delete endpoint 3`] = `
{
  "alias": "$target_2",
  "identifyWith": {
    "paramName": "issue_id",
    "path": [
      "id",
    ],
    "type": "integer",
  },
  "kind": "relation",
  "name": "issues",
  "namePath": [
    "Org",
    "repos",
    "issues",
  ],
  "retType": "Issue",
  "select": [
    {
      "alias": "id",
      "expr": {
        "kind": "identifier-path",
        "namePath": [
          "Org",
          "repos",
          "issues",
          "id",
        ],
      },
      "kind": "expression",
      "type": {
        "kind": "integer",
        "nullable": false,
      },
    },
  ],
}
`;

exports[`Endpoint queries Deeply nested entrypoints test delete endpoint 4`] = `
[
  {
    "alias": "$target_0",
    "identifyWith": {
      "paramName": "org_slug",
      "path": [
        "slug",
      ],
      "type": "string",
    },
    "kind": "model",
    "name": "Org",
    "namePath": [
      "Org",
    ],
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "alias": "$target_1",
    "identifyWith": {
      "paramName": "repo_id",
      "path": [
        "id",
      ],
      "type": "integer",
    },
    "kind": "relation",
    "name": "repos",
    "namePath": [
      "Org",
      "repos",
    ],
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "repos",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test get endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "slug",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "org_slug",
          ],
          "source": "pathParams",
          "type": {
            "kind": "string",
            "nullable": false,
          },
        },
      ],
      "kind": "function",
      "name": "is",
    },
    "fromPath": [
      "Org",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_0",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Org",
                "repos",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "repo_id",
              ],
              "source": "pathParams",
              "type": {
                "kind": "integer",
                "nullable": false,
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Org",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "@context_ids",
              ],
              "source": undefined,
              "type": {
                "kind": "collection",
                "type": {
                  "kind": "integer",
                  "nullable": false,
                },
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Org",
      "repos",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_1",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "repos",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Repo",
                "issues",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "issue_id",
              ],
              "source": "pathParams",
              "type": {
                "kind": "integer",
                "nullable": false,
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Repo",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "@context_ids",
              ],
              "source": undefined,
              "type": {
                "kind": "collection",
                "type": {
                  "kind": "integer",
                  "nullable": false,
                },
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Repo",
      "issues",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Repo",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Repo",
            "issues",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "id",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "@context_ids",
          ],
          "source": undefined,
          "type": {
            "kind": "collection",
            "type": {
              "kind": "integer",
              "nullable": false,
            },
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Issue",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Issue",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
      {
        "alias": "name",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "name",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "string",
          "nullable": false,
        },
      },
      {
        "alias": "repo_id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "repo_id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test get endpoint 2`] = `
[
  "SELECT
  "Org"."id" AS "id"
FROM
  "org" AS "Org"
WHERE
  "Org"."slug" = :pathParams.org_slug


",
  "SELECT
  "Org.repos"."id" AS "id"
FROM
  "org" AS "Org"
  INNER JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
WHERE
  "Org.repos"."id" = :pathParams.repo_id
  AND "Org"."id" IN :@context_ids


",
  "SELECT
  "Repo.issues"."id" AS "id"
FROM
  "repo" AS "Repo"
  INNER JOIN "issue" AS "Repo.issues" ON "Repo"."id" = "Repo.issues"."repo_id"
WHERE
  "Repo.issues"."id" = :pathParams.issue_id
  AND "Repo"."id" IN :@context_ids


",
  "SELECT
  "Issue"."id" AS "id",
  "Issue"."name" AS "name",
  "Issue"."repo_id" AS "repo_id"
FROM
  "issue" AS "Issue"
WHERE
  "Issue"."id" IN :@context_ids


",
]
`;

exports[`Endpoint queries Deeply nested entrypoints test get endpoint 3`] = `
{
  "alias": "$target_2",
  "identifyWith": {
    "paramName": "issue_id",
    "path": [
      "id",
    ],
    "type": "integer",
  },
  "kind": "relation",
  "name": "issues",
  "namePath": [
    "Org",
    "repos",
    "issues",
  ],
  "retType": "Issue",
  "select": [
    {
      "alias": "id",
      "expr": {
        "kind": "identifier-path",
        "namePath": [
          "Org",
          "repos",
          "issues",
          "id",
        ],
      },
      "kind": "expression",
      "type": {
        "kind": "integer",
        "nullable": false,
      },
    },
  ],
}
`;

exports[`Endpoint queries Deeply nested entrypoints test get endpoint 4`] = `
[
  {
    "alias": "$target_0",
    "identifyWith": {
      "paramName": "org_slug",
      "path": [
        "slug",
      ],
      "type": "string",
    },
    "kind": "model",
    "name": "Org",
    "namePath": [
      "Org",
    ],
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "alias": "$target_1",
    "identifyWith": {
      "paramName": "repo_id",
      "path": [
        "id",
      ],
      "type": "integer",
    },
    "kind": "relation",
    "name": "repos",
    "namePath": [
      "Org",
      "repos",
    ],
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "repos",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test list endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "slug",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "org_slug",
          ],
          "source": "pathParams",
          "type": {
            "kind": "string",
            "nullable": false,
          },
        },
      ],
      "kind": "function",
      "name": "is",
    },
    "fromPath": [
      "Org",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_0",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Org",
                "repos",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "repo_id",
              ],
              "source": "pathParams",
              "type": {
                "kind": "integer",
                "nullable": false,
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Org",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "@context_ids",
              ],
              "source": undefined,
              "type": {
                "kind": "collection",
                "type": {
                  "kind": "integer",
                  "nullable": false,
                },
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Org",
      "repos",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_1",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "repos",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Repo",
            "id",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "@context_ids",
          ],
          "source": undefined,
          "type": {
            "kind": "collection",
            "type": {
              "kind": "integer",
              "nullable": false,
            },
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Repo",
      "issues",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Repo",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Repo",
            "issues",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Repo",
            "id",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "@context_ids",
          ],
          "source": undefined,
          "type": {
            "kind": "collection",
            "type": {
              "kind": "integer",
              "nullable": false,
            },
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Repo",
      "issues",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Repo",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Repo",
            "issues",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
      {
        "alias": "name",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Repo",
            "issues",
            "name",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "string",
          "nullable": false,
        },
      },
      {
        "alias": "repo_id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Repo",
            "issues",
            "repo_id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test list endpoint 2`] = `
[
  "SELECT
  "Org"."id" AS "id"
FROM
  "org" AS "Org"
WHERE
  "Org"."slug" = :pathParams.org_slug


",
  "SELECT
  "Org.repos"."id" AS "id"
FROM
  "org" AS "Org"
  INNER JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
WHERE
  "Org.repos"."id" = :pathParams.repo_id
  AND "Org"."id" IN :@context_ids


",
  "SELECT
  "Repo.issues"."id" AS "id"
FROM
  "repo" AS "Repo"
  INNER JOIN "issue" AS "Repo.issues" ON "Repo"."id" = "Repo.issues"."repo_id"
WHERE
  "Repo"."id" IN :@context_ids


",
  "SELECT
  "Repo.issues"."id" AS "id",
  "Repo.issues"."name" AS "name",
  "Repo.issues"."repo_id" AS "repo_id"
FROM
  "repo" AS "Repo"
  INNER JOIN "issue" AS "Repo.issues" ON "Repo"."id" = "Repo.issues"."repo_id"
WHERE
  "Repo"."id" IN :@context_ids


",
]
`;

exports[`Endpoint queries Deeply nested entrypoints test list endpoint 3`] = `
{
  "alias": "$target_2",
  "kind": "relation",
  "name": "issues",
  "namePath": [
    "Org",
    "repos",
    "issues",
  ],
  "retType": "Issue",
  "select": [
    {
      "alias": "id",
      "expr": {
        "kind": "identifier-path",
        "namePath": [
          "Org",
          "repos",
          "issues",
          "id",
        ],
      },
      "kind": "expression",
      "type": {
        "kind": "integer",
        "nullable": false,
      },
    },
  ],
}
`;

exports[`Endpoint queries Deeply nested entrypoints test list endpoint 4`] = `
[
  {
    "alias": "$target_0",
    "identifyWith": {
      "paramName": "org_slug",
      "path": [
        "slug",
      ],
      "type": "string",
    },
    "kind": "model",
    "name": "Org",
    "namePath": [
      "Org",
    ],
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "alias": "$target_1",
    "identifyWith": {
      "paramName": "repo_id",
      "path": [
        "id",
      ],
      "type": "integer",
    },
    "kind": "relation",
    "name": "repos",
    "namePath": [
      "Org",
      "repos",
    ],
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "repos",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test update endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "slug",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "org_slug",
          ],
          "source": "pathParams",
          "type": {
            "kind": "string",
            "nullable": false,
          },
        },
      ],
      "kind": "function",
      "name": "is",
    },
    "fromPath": [
      "Org",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_0",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Org",
                "repos",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "repo_id",
              ],
              "source": "pathParams",
              "type": {
                "kind": "integer",
                "nullable": false,
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Org",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "@context_ids",
              ],
              "source": undefined,
              "type": {
                "kind": "collection",
                "type": {
                  "kind": "integer",
                  "nullable": false,
                },
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Org",
      "repos",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "$target_1",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "repos",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Repo",
                "issues",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "issue_id",
              ],
              "source": "pathParams",
              "type": {
                "kind": "integer",
                "nullable": false,
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Repo",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "@context_ids",
              ],
              "source": undefined,
              "type": {
                "kind": "collection",
                "type": {
                  "kind": "integer",
                  "nullable": false,
                },
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Repo",
      "issues",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Repo",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Repo",
            "issues",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "id",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "@context_ids",
          ],
          "source": undefined,
          "type": {
            "kind": "collection",
            "type": {
              "kind": "integer",
              "nullable": false,
            },
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Issue",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Issue",
    "name": "$target_2",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Issue",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
      {
        "alias": "name",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "name",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "string",
          "nullable": false,
        },
      },
      {
        "alias": "repo_id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Issue",
            "repo_id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries Deeply nested entrypoints test update endpoint 2`] = `
[
  "SELECT
  "Org"."id" AS "id"
FROM
  "org" AS "Org"
WHERE
  "Org"."slug" = :pathParams.org_slug


",
  "SELECT
  "Org.repos"."id" AS "id"
FROM
  "org" AS "Org"
  INNER JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
WHERE
  "Org.repos"."id" = :pathParams.repo_id
  AND "Org"."id" IN :@context_ids


",
  "SELECT
  "Repo.issues"."id" AS "id"
FROM
  "repo" AS "Repo"
  INNER JOIN "issue" AS "Repo.issues" ON "Repo"."id" = "Repo.issues"."repo_id"
WHERE
  "Repo.issues"."id" = :pathParams.issue_id
  AND "Repo"."id" IN :@context_ids


",
  "SELECT
  "Issue"."id" AS "id",
  "Issue"."name" AS "name",
  "Issue"."repo_id" AS "repo_id"
FROM
  "issue" AS "Issue"
WHERE
  "Issue"."id" IN :@context_ids


",
]
`;

exports[`Endpoint queries Deeply nested entrypoints test update endpoint 3`] = `
{
  "alias": "$target_2",
  "identifyWith": {
    "paramName": "issue_id",
    "path": [
      "id",
    ],
    "type": "integer",
  },
  "kind": "relation",
  "name": "issues",
  "namePath": [
    "Org",
    "repos",
    "issues",
  ],
  "retType": "Issue",
  "select": [
    {
      "alias": "id",
      "expr": {
        "kind": "identifier-path",
        "namePath": [
          "Org",
          "repos",
          "issues",
          "id",
        ],
      },
      "kind": "expression",
      "type": {
        "kind": "integer",
        "nullable": false,
      },
    },
  ],
}
`;

exports[`Endpoint queries Deeply nested entrypoints test update endpoint 4`] = `
[
  {
    "alias": "$target_0",
    "identifyWith": {
      "paramName": "org_slug",
      "path": [
        "slug",
      ],
      "type": "string",
    },
    "kind": "model",
    "name": "Org",
    "namePath": [
      "Org",
    ],
    "retType": "Org",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "alias": "$target_1",
    "identifyWith": {
      "paramName": "repo_id",
      "path": [
        "id",
      ],
      "type": "integer",
    },
    "kind": "relation",
    "name": "repos",
    "namePath": [
      "Org",
      "repos",
    ],
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "repos",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries List endpoint response queries test orderBy query endpoint 1`] = `
[
  {
    "filter": undefined,
    "fromPath": [
      "Item",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Item",
    "name": "$target_0",
    "offset": undefined,
    "orderBy": [
      {
        "direction": "desc",
        "exp": {
          "kind": "identifier-path",
          "namePath": [
            "Item",
            "name",
          ],
        },
      },
    ],
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Item",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
      {
        "alias": "name",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item",
            "name",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "string",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries List endpoint response queries test orderBy query endpoint 2`] = `
[
  "SELECT
  "Item"."id" AS "id",
  "Item"."name" AS "name"
FROM
  "item" AS "Item"
ORDER BY
  "Item"."name" desc


",
]
`;

exports[`Endpoint queries List endpoint response queries test paging query endpoint 1`] = `
[
  {
    "filter": undefined,
    "fromPath": [
      "Item",
    ],
    "kind": "query",
    "limit": 10,
    "modelRefKey": "Item",
    "name": "$target_0",
    "offset": 10,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Item",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
      {
        "alias": "name",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item",
            "name",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "string",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries List endpoint response queries test paging query endpoint 2`] = `
[
  "SELECT
  "Item"."id" AS "id",
  "Item"."name" AS "name"
FROM
  "item" AS "Item"
LIMIT
  10
OFFSET
  10


",
]
`;

exports[`Endpoint queries List endpoint response queries test paging/order/filter query endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Item",
                "name",
              ],
            },
            {
              "kind": "literal",
              "literal": {
                "kind": "string",
                "value": "asdf",
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Item",
    ],
    "kind": "query",
    "limit": 10,
    "modelRefKey": "Item",
    "name": "$target_0",
    "offset": 10,
    "orderBy": [
      {
        "direction": "desc",
        "exp": {
          "kind": "identifier-path",
          "namePath": [
            "Item",
            "name",
          ],
        },
      },
    ],
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Item",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
      {
        "alias": "name",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item",
            "name",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "string",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries List endpoint response queries test paging/order/filter query endpoint 2`] = `
[
  "SELECT
  "Item"."id" AS "id",
  "Item"."name" AS "name"
FROM
  "item" AS "Item"
WHERE
  "Item"."name" = 'asdf'
  AND TRUE = TRUE
ORDER BY
  "Item"."name" desc
LIMIT
  10
OFFSET
  10


",
]
`;

exports[`Endpoint queries List endpoint response queries test plain query endpoint 1`] = `
[
  {
    "filter": undefined,
    "fromPath": [
      "Item",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Item",
    "name": "$target_0",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Item",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
      {
        "alias": "name",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item",
            "name",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "string",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries List endpoint response queries test plain query endpoint 2`] = `
[
  "SELECT
  "Item"."id" AS "id",
  "Item"."name" AS "name"
FROM
  "item" AS "Item"


",
]
`;

exports[`Endpoint queries List nested endpoint response queries test orderBy query endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "id",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "@context_ids",
          ],
          "source": undefined,
          "type": {
            "kind": "collection",
            "type": {
              "kind": "integer",
              "nullable": false,
            },
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Item1",
      "item2",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Item1",
    "name": "$target_1",
    "offset": undefined,
    "orderBy": [
      {
        "direction": "desc",
        "exp": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "name",
          ],
        },
      },
    ],
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Item2",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
      {
        "alias": "name",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "name",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "string",
          "nullable": false,
        },
      },
      {
        "alias": "item1_id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "item1_id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries List nested endpoint response queries test orderBy query endpoint 2`] = `
[
  "SELECT
  "Item1.item2"."id" AS "id",
  "Item1.item2"."name" AS "name",
  "Item1.item2"."item1_id" AS "item1_id"
FROM
  "item1" AS "Item1"
  INNER JOIN "item2" AS "Item1.item2" ON "Item1"."id" = "Item1.item2"."item1_id"
WHERE
  "Item1"."id" IN :@context_ids
ORDER BY
  "Item1.item2"."name" desc


",
]
`;

exports[`Endpoint queries List nested endpoint response queries test paging query endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "id",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "@context_ids",
          ],
          "source": undefined,
          "type": {
            "kind": "collection",
            "type": {
              "kind": "integer",
              "nullable": false,
            },
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Item1",
      "item2",
    ],
    "kind": "query",
    "limit": 10,
    "modelRefKey": "Item1",
    "name": "$target_1",
    "offset": 10,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Item2",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
      {
        "alias": "name",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "name",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "string",
          "nullable": false,
        },
      },
      {
        "alias": "item1_id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "item1_id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries List nested endpoint response queries test paging query endpoint 2`] = `
[
  "SELECT
  "Item1.item2"."id" AS "id",
  "Item1.item2"."name" AS "name",
  "Item1.item2"."item1_id" AS "item1_id"
FROM
  "item1" AS "Item1"
  INNER JOIN "item2" AS "Item1.item2" ON "Item1"."id" = "Item1.item2"."item1_id"
WHERE
  "Item1"."id" IN :@context_ids
LIMIT
  10
OFFSET
  10


",
]
`;

exports[`Endpoint queries List nested endpoint response queries test paging/order/filter query endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Item1",
                "item2",
                "name",
              ],
            },
            {
              "kind": "literal",
              "literal": {
                "kind": "string",
                "value": "asdf",
              },
            },
          ],
          "kind": "function",
          "name": "is",
        },
        {
          "args": [
            {
              "kind": "identifier-path",
              "namePath": [
                "Item1",
                "id",
              ],
            },
            {
              "kind": "alias-reference",
              "path": [
                "@context_ids",
              ],
              "source": undefined,
              "type": {
                "kind": "collection",
                "type": {
                  "kind": "integer",
                  "nullable": false,
                },
              },
            },
          ],
          "kind": "function",
          "name": "in",
        },
      ],
      "kind": "function",
      "name": "and",
    },
    "fromPath": [
      "Item1",
      "item2",
    ],
    "kind": "query",
    "limit": 10,
    "modelRefKey": "Item1",
    "name": "$target_1",
    "offset": 10,
    "orderBy": [
      {
        "direction": "desc",
        "exp": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "name",
          ],
        },
      },
    ],
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Item2",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
      {
        "alias": "name",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "name",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "string",
          "nullable": false,
        },
      },
      {
        "alias": "item1_id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "item1_id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries List nested endpoint response queries test paging/order/filter query endpoint 2`] = `
[
  "SELECT
  "Item1.item2"."id" AS "id",
  "Item1.item2"."name" AS "name",
  "Item1.item2"."item1_id" AS "item1_id"
FROM
  "item1" AS "Item1"
  INNER JOIN "item2" AS "Item1.item2" ON "Item1"."id" = "Item1.item2"."item1_id"
WHERE
  "Item1.item2"."name" = 'asdf'
  AND "Item1"."id" IN :@context_ids
ORDER BY
  "Item1.item2"."name" desc
LIMIT
  10
OFFSET
  10


",
]
`;

exports[`Endpoint queries List nested endpoint response queries test plain query endpoint 1`] = `
[
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "id",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "@context_ids",
          ],
          "source": undefined,
          "type": {
            "kind": "collection",
            "type": {
              "kind": "integer",
              "nullable": false,
            },
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Item1",
      "item2",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Item1",
    "name": "$target_1",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Item2",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
      {
        "alias": "name",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "name",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "string",
          "nullable": false,
        },
      },
      {
        "alias": "item1_id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Item1",
            "item2",
            "item1_id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Endpoint queries List nested endpoint response queries test plain query endpoint 2`] = `
[
  "SELECT
  "Item1.item2"."id" AS "id",
  "Item1.item2"."name" AS "name",
  "Item1.item2"."item1_id" AS "item1_id"
FROM
  "item1" AS "Item1"
  INNER JOIN "item2" AS "Item1.item2" ON "Item1"."id" = "Item1.item2"."item1_id"
WHERE
  "Item1"."id" IN :@context_ids


",
]
`;

exports[`Orderby, limit and offset supports orderby, limit and offset in batching query 1`] = `
[
  {
    "filter": undefined,
    "fromPath": [
      "Org",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "test",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Org",
    "select": [
      {
        "alias": "__gaudi__target_id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
  {
    "filter": {
      "args": [
        {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "id",
          ],
        },
        {
          "kind": "alias-reference",
          "path": [
            "@context_ids",
          ],
          "source": undefined,
          "type": {
            "kind": "collection",
            "type": {
              "kind": "integer",
              "nullable": false,
            },
          },
        },
      ],
      "kind": "function",
      "name": "in",
    },
    "fromPath": [
      "Org",
      "recent_repos",
    ],
    "kind": "query",
    "limit": undefined,
    "modelRefKey": "Org",
    "name": "recent_repos",
    "offset": undefined,
    "orderBy": undefined,
    "refKey": "N/A",
    "retCardinality": "collection",
    "retType": "Repo",
    "select": [
      {
        "alias": "id",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "recent_repos",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
      {
        "alias": "__join_connection",
        "expr": {
          "kind": "identifier-path",
          "namePath": [
            "Org",
            "id",
          ],
        },
        "kind": "expression",
        "type": {
          "kind": "integer",
          "nullable": false,
        },
      },
    ],
  },
]
`;

exports[`Orderby, limit and offset supports orderby, limit and offset in batching query 2`] = `
"SELECT
  "Org"."id" AS "__gaudi__target_id"
FROM
  "org" AS "Org"


SELECT
  "Org.recent_repos"."id" AS "id",
  "Org"."id" AS "__join_connection"
FROM
  "org" AS "Org"
  INNER JOIN (
    SELECT
      *
    FROM
      (
        SELECT
          "Org.repos".*,
          "Org"."id" AS "__join_connection",
          ROW_NUMBER() OVER (
            PARTITION BY
              "Org"."id"
            ORDER BY
              "Org.repos"."id" desc
          ) AS "__row_number"
        FROM
          "org" AS "Org"
          INNER JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
      ) AS topn
    WHERE
      topn."__row_number" <= 15
      AND topn."__row_number" > 5
  ) AS "Org.recent_repos" ON "Org"."id" = "Org.recent_repos"."__join_connection"
WHERE
  "Org"."id" IN :@context_ids"
`;

exports[`Orderby, limit and offset supports orderby, limit and offset in non-batching query 1`] = `
"SELECT
  "Org.repos".*,
  "Org"."id" AS "__join_connection"
FROM
  "org" AS "Org"
  INNER JOIN "repo" AS "Org.repos" ON "Org"."id" = "Org.repos"."org_id"
ORDER BY
  "Org.repos"."id" desc
LIMIT
  10
OFFSET
  5"
`;
