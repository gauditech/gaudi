
# simple query with nested selects
query {
    from Org
    select name, slug, members {
        filter (
            asdf asdf asdf as df and
            asdfsadf asdf asdf asdf asdf and
            asdfsdaf asdf jsadklf
        )

        select id, full_name, profile_pic

        select {id, full_name,
                profile_pic, members { select {} }}

        select id
        select full_name
        select profile_pic
        }
}

# query with filtered relation or query
query {
    from Org
    select name, slug, members {
        filter is_deleted is false
        select id, full name, profile pic
    }
}

## Problem 1: Limit by , then filter

model Player {
    relation all_games { from Game }
    query games { from all_games.NonDeleted }
    query latest_games { from all_games, order_by ts desc, limit 5 }
}

query {
    from Player as p
    role superuser {}

    role * {
        xxx all_games filter is_private is false
    } 

    extend memberships {
        role superuser {}
        role * {
            apply filter not is_deleted
        }
    }

    extend members {
        select full_name
    }

    extend memberships {
        filter not is_deleted
    }

    query all_memberships {}

    query members { from membership.user, ... }
    select members
    select membership.user as members { ... }, name

    extend members { ... }
    select members

    select members { ... }

    query total_num_of_games {
        from Game
        filter { is_finished and p in members }
    }

    select latest_games {
        filter tournament.is_private is false or tournament is null
        -- replace limit 10 # prob. just stupid
    }
}

## Let's introduce model filters they might help us with filtering

model Game {
    reference tournament { from Tournament, nullable }
    field is_deleted { type boolean, default false }

    filter Competitive { tournament is not null }
    filter NonCompetitive { tournament is null }
    filter Visible { is_deleted is not null }
}

query {
    from Player
    select name, games.Visible.NonCompetitive as friendly_games { [select ]created_at, score }
}

## longer syntax as follows

query {
    from Player
    select name, games {
        filter Visible and NonCompetitive
        select created_at, score
    }
}

## or!

query {
    from Player
    query friendly_games { from games.Visible.NonCompetitive }
    # or:
    query friendly_games { from games, filter Visible and NonCompetitive }
    select name, friendly_games as games { [select ]created_at, score }
}

## filter accepts params??

    query mutual_games { from games, filter PlayedBy(@auth) }

## or a transform!!!


query {
    from Player
    query friendly_games { from games.Visible.NonCompetitive }
    # or:
    query friendly_games { from games, filter Visible and NonCompetitive }
    select name, friendly_games { [select ]created_at, score }
    transform {
        rename friendly_games to games
    }
}


query {
    from Group
    select name, members {
        // filtrirati po `membership`
        // members <= memberships.user
    }
}


## Filtering the whole table??

## Filtering by membership?

## Filtering `membership.user` by membership?


query AllOrgRelatedStuff {
    from Org
    select repos {
        select issues {
            select author!, assigees.Tall { ! }, reviewers { ! }
            select comments { select author!, reactions { select author! }}
        }
    }
}

model User {
    default modifier {
        unselect pwd_hash
        filter not is_deleted
    }
    modifier Tall {
        from default
    }
    modifier All {
        !dont use default
    }
}

admin User {
    modifier ..
}
query {
    extend User {
        select password_hash
        remove filter
    }
    limit model User.All to {
        unselect pwd_hash
        filter not is_deleted
    }
    from AllOrgRelatedStuff
    select *
}


}

# zelimo izbacit pwd_hash iz selecta globalno
# zelimo izbacit is_deleted usere globalno
